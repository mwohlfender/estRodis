// Generated by rstantools.  Do not edit by hand.

/*
    estRodis is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    estRodis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with estRodis.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_estRodis_stan_model_estimate_parameters_test_simple_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 593, column 2 to column 23)",
                                                      " (in 'string', line 594, column 2 to column 23)",
                                                      " (in 'string', line 595, column 2 to column 45)",
                                                      " (in 'string', line 596, column 2 to column 75)",
                                                      " (in 'string', line 599, column 2 to column 95)",
                                                      " (in 'string', line 600, column 2 to column 58)",
                                                      " (in 'string', line 605, column 2 to column 36)",
                                                      " (in 'string', line 607, column 2 to column 36)",
                                                      " (in 'string', line 609, column 2 to column 103)",
                                                      " (in 'string', line 611, column 2 to column 116)",
                                                      " (in 'string', line 613, column 2 to column 129)",
                                                      " (in 'string', line 573, column 2 to column 22)",
                                                      " (in 'string', line 575, column 20 to column 21)",
                                                      " (in 'string', line 575, column 2 to column 23)",
                                                      " (in 'string', line 577, column 20 to column 21)",
                                                      " (in 'string', line 577, column 2 to column 23)",
                                                      " (in 'string', line 579, column 2 to column 18)",
                                                      " (in 'string', line 581, column 2 to column 18)",
                                                      " (in 'string', line 583, column 2 to column 32)",
                                                      " (in 'string', line 585, column 2 to column 40)",
                                                      " (in 'string', line 588, column 2 to column 24)",
                                                      " (in 'string', line 590, column 2 to column 24)",
                                                      " (in 'string', line 10, column 4 to column 20)",
                                                      " (in 'string', line 14, column 6 to column 133)",
                                                      " (in 'string', line 12, column 27 to line 16, column 5)",
                                                      " (in 'string', line 12, column 4 to line 16, column 5)",
                                                      " (in 'string', line 18, column 4 to column 19)",
                                                      " (in 'string', line 8, column 85 to line 20, column 3)",
                                                      " (in 'string', line 26, column 4 to column 19)",
                                                      " (in 'string', line 34, column 25 to column 37)",
                                                      " (in 'string', line 34, column 6 to column 37)",
                                                      " (in 'string', line 32, column 11 to line 36, column 5)",
                                                      " (in 'string', line 30, column 6 to column 20)",
                                                      " (in 'string', line 28, column 19 to line 32, column 5)",
                                                      " (in 'string', line 28, column 4 to line 36, column 5)",
                                                      " (in 'string', line 38, column 4 to column 19)",
                                                      " (in 'string', line 24, column 39 to line 40, column 3)",
                                                      " (in 'string', line 46, column 4 to column 73)",
                                                      " (in 'string', line 44, column 72 to line 48, column 3)",
                                                      " (in 'string', line 54, column 4 to column 116)",
                                                      " (in 'string', line 52, column 83 to line 56, column 3)",
                                                      " (in 'string', line 62, column 4 to column 20)",
                                                      " (in 'string', line 70, column 6 to column 18)",
                                                      " (in 'string', line 68, column 11 to line 72, column 5)",
                                                      " (in 'string', line 66, column 6 to column 17)",
                                                      " (in 'string', line 64, column 16 to line 68, column 5)",
                                                      " (in 'string', line 64, column 4 to line 72, column 5)",
                                                      " (in 'string', line 74, column 4 to column 19)",
                                                      " (in 'string', line 60, column 30 to line 76, column 3)",
                                                      " (in 'string', line 82, column 4 to column 18)",
                                                      " (in 'string', line 83, column 4 to column 35)",
                                                      " (in 'string', line 85, column 4 to column 18)",
                                                      " (in 'string', line 89, column 6 to column 22)",
                                                      " (in 'string', line 91, column 6 to column 131)",
                                                      " (in 'string', line 93, column 6 to column 24)",
                                                      " (in 'string', line 87, column 71 to line 95, column 5)",
                                                      " (in 'string', line 87, column 4 to line 95, column 5)",
                                                      " (in 'string', line 97, column 4 to column 22)",
                                                      " (in 'string', line 80, column 111 to line 99, column 3)",
                                                      " (in 'string', line 106, column 4 to column 54)",
                                                      " (in 'string', line 109, column 4 to column 77)",
                                                      " (in 'string', line 112, column 4 to column 149)",
                                                      " (in 'string', line 115, column 4 to column 55)",
                                                      " (in 'string', line 118, column 4 to column 65)",
                                                      " (in 'string', line 121, column 4 to column 29)",
                                                      " (in 'string', line 124, column 4 to column 33)",
                                                      " (in 'string', line 127, column 18 to column 62)",
                                                      " (in 'string', line 127, column 4 to column 127)",
                                                      " (in 'string', line 130, column 21 to column 65)",
                                                      " (in 'string', line 130, column 4 to column 135)",
                                                      " (in 'string', line 133, column 45 to column 89)",
                                                      " (in 'string', line 133, column 4 to column 159)",
                                                      " (in 'string', line 136, column 4 to column 62)",
                                                      " (in 'string', line 139, column 4 to column 69)",
                                                      " (in 'string', line 142, column 55 to column 73)",
                                                      " (in 'string', line 142, column 4 to column 117)",
                                                      " (in 'string', line 145, column 4 to column 18)",
                                                      " (in 'string', line 148, column 4 to column 96)",
                                                      " (in 'string', line 151, column 4 to column 30)",
                                                      " (in 'string', line 154, column 4 to column 23)",
                                                      " (in 'string', line 157, column 4 to column 27)",
                                                      " (in 'string', line 160, column 4 to column 45)",
                                                      " (in 'string', line 163, column 4 to column 20)",
                                                      " (in 'string', line 169, column 6 to column 159)",
                                                      " (in 'string', line 166, column 62 to line 171, column 5)",
                                                      " (in 'string', line 166, column 4 to line 171, column 5)",
                                                      " (in 'string', line 209, column 6 to column 49)",
                                                      " (in 'string', line 212, column 6 to column 57)",
                                                      " (in 'string', line 215, column 65 to column 106)",
                                                      " (in 'string', line 215, column 6 to column 106)",
                                                      " (in 'string', line 218, column 65 to column 152)",
                                                      " (in 'string', line 218, column 6 to column 152)",
                                                      " (in 'string', line 220, column 6 to column 75)",
                                                      " (in 'string', line 222, column 6 to column 113)",
                                                      " (in 'string', line 224, column 6 to column 171)",
                                                      " (in 'string', line 226, column 6 to column 39)",
                                                      " (in 'string', line 234, column 8 to column 85)",
                                                      " (in 'string', line 232, column 13 to line 236, column 7)",
                                                      " (in 'string', line 230, column 8 to column 91)",
                                                      " (in 'string', line 228, column 27 to line 232, column 7)",
                                                      " (in 'string', line 228, column 6 to line 236, column 7)",
                                                      " (in 'string', line 244, column 10 to column 29)",
                                                      " (in 'string', line 248, column 12 to column 30)",
                                                      " (in 'string', line 246, column 42 to line 250, column 11)",
                                                      " (in 'string', line 246, column 10 to line 250, column 11)",
                                                      " (in 'string', line 242, column 22 to line 252, column 9)",
                                                      " (in 'string', line 242, column 8 to line 252, column 9)",
                                                      " (in 'string', line 290, column 14 to column 33)",
                                                      " (in 'string', line 288, column 19 to line 292, column 13)",
                                                      " (in 'string', line 284, column 16 to column 35)",
                                                      " (in 'string', line 282, column 21 to line 286, column 15)",
                                                      " (in 'string', line 276, column 16 to column 35)",
                                                      " (in 'string', line 278, column 16 to column 39)",
                                                      " (in 'string', line 280, column 16 to column 169)",
                                                      " (in 'string', line 274, column 190 to line 282, column 15)",
                                                      " (in 'string', line 274, column 14 to line 286, column 15)",
                                                      " (in 'string', line 272, column 40 to line 288, column 13)",
                                                      " (in 'string', line 272, column 12 to line 292, column 13)",
                                                      " (in 'string', line 270, column 17 to line 294, column 11)",
                                                      " (in 'string', line 266, column 14 to column 33)",
                                                      " (in 'string', line 264, column 19 to line 268, column 13)",
                                                      " (in 'string', line 260, column 14 to column 33)",
                                                      " (in 'string', line 262, column 14 to column 32)",
                                                      " (in 'string', line 258, column 44 to line 264, column 13)",
                                                      " (in 'string', line 258, column 12 to line 268, column 13)",
                                                      " (in 'string', line 256, column 44 to line 270, column 11)",
                                                      " (in 'string', line 256, column 10 to line 294, column 11)",
                                                      " (in 'string', line 254, column 21 to line 296, column 9)",
                                                      " (in 'string', line 254, column 8 to line 296, column 9)",
                                                      " (in 'string', line 301, column 10 to column 90)",
                                                      " (in 'string', line 303, column 42 to column 219)",
                                                      " (in 'string', line 303, column 10 to column 219)",
                                                      " (in 'string', line 306, column 10 to column 195)",
                                                      " (in 'string', line 298, column 33 to line 308, column 9)",
                                                      " (in 'string', line 298, column 8 to line 308, column 9)",
                                                      " (in 'string', line 240, column 37 to line 310, column 7)",
                                                      " (in 'string', line 240, column 6 to line 310, column 7)",
                                                      " (in 'string', line 206, column 11 to line 312, column 5)",
                                                      " (in 'string', line 176, column 37 to column 129)",
                                                      " (in 'string', line 176, column 6 to column 129)",
                                                      " (in 'string', line 178, column 6 to column 47)",
                                                      " (in 'string', line 180, column 6 to column 39)",
                                                      " (in 'string', line 188, column 8 to column 85)",
                                                      " (in 'string', line 186, column 13 to line 190, column 7)",
                                                      " (in 'string', line 184, column 8 to column 91)",
                                                      " (in 'string', line 182, column 27 to line 186, column 7)",
                                                      " (in 'string', line 182, column 6 to line 190, column 7)",
                                                      " (in 'string', line 198, column 12 to column 35)",
                                                      " (in 'string', line 196, column 186 to line 200, column 11)",
                                                      " (in 'string', line 196, column 10 to line 200, column 11)",
                                                      " (in 'string', line 194, column 51 to line 202, column 9)",
                                                      " (in 'string', line 194, column 8 to line 202, column 9)",
                                                      " (in 'string', line 192, column 37 to line 204, column 7)",
                                                      " (in 'string', line 192, column 6 to line 204, column 7)",
                                                      " (in 'string', line 173, column 32 to line 206, column 5)",
                                                      " (in 'string', line 173, column 4 to line 312, column 5)",
                                                      " (in 'string', line 322, column 8 to column 112)",
                                                      " (in 'string', line 320, column 13 to line 324, column 7)",
                                                      " (in 'string', line 318, column 8 to column 111)",
                                                      " (in 'string', line 316, column 49 to line 320, column 7)",
                                                      " (in 'string', line 316, column 6 to line 324, column 7)",
                                                      " (in 'string', line 314, column 34 to line 326, column 5)",
                                                      " (in 'string', line 314, column 4 to line 326, column 5)",
                                                      " (in 'string', line 334, column 4 to column 19)",
                                                      " (in 'string', line 103, column 187 to line 336, column 3)",
                                                      " (in 'string', line 343, column 4 to column 149)",
                                                      " (in 'string', line 346, column 4 to column 55)",
                                                      " (in 'string', line 349, column 4 to column 65)",
                                                      " (in 'string', line 352, column 4 to column 29)",
                                                      " (in 'string', line 355, column 4 to column 33)",
                                                      " (in 'string', line 358, column 18 to column 62)",
                                                      " (in 'string', line 358, column 4 to column 127)",
                                                      " (in 'string', line 361, column 21 to column 65)",
                                                      " (in 'string', line 361, column 4 to column 135)",
                                                      " (in 'string', line 364, column 42 to column 86)",
                                                      " (in 'string', line 364, column 4 to column 156)",
                                                      " (in 'string', line 367, column 4 to column 58)",
                                                      " (in 'string', line 373, column 6 to column 156)",
                                                      " (in 'string', line 370, column 62 to line 375, column 5)",
                                                      " (in 'string', line 370, column 4 to line 375, column 5)",
                                                      " (in 'string', line 385, column 6 to column 49)",
                                                      " (in 'string', line 388, column 6 to column 57)",
                                                      " (in 'string', line 391, column 65 to column 106)",
                                                      " (in 'string', line 391, column 6 to column 106)",
                                                      " (in 'string', line 394, column 65 to column 149)",
                                                      " (in 'string', line 394, column 6 to column 149)",
                                                      " (in 'string', line 397, column 6 to column 87)",
                                                      " (in 'string', line 382, column 11 to line 399, column 5)",
                                                      " (in 'string', line 380, column 6 to column 55)",
                                                      " (in 'string', line 377, column 32 to line 382, column 5)",
                                                      " (in 'string', line 377, column 4 to line 399, column 5)",
                                                      " (in 'string', line 401, column 4 to column 57)",
                                                      " (in 'string', line 340, column 124 to line 403, column 3)",
                                                      " (in 'string', line 410, column 4 to column 96)",
                                                      " (in 'string', line 413, column 4 to column 122)",
                                                      " (in 'string', line 416, column 4 to column 94)",
                                                      " (in 'string', line 418, column 4 to column 19)",
                                                      " (in 'string', line 407, column 103 to line 420, column 3)",
                                                      " (in 'string', line 426, column 4 to column 54)",
                                                      " (in 'string', line 429, column 4 to column 153)",
                                                      " (in 'string', line 432, column 4 to column 55)",
                                                      " (in 'string', line 435, column 4 to column 65)",
                                                      " (in 'string', line 438, column 4 to column 52)",
                                                      " (in 'string', line 441, column 4 to column 60)",
                                                      " (in 'string', line 444, column 4 to column 58)",
                                                      " (in 'string', line 447, column 18 to column 62)",
                                                      " (in 'string', line 447, column 4 to column 127)",
                                                      " (in 'string', line 450, column 21 to column 65)",
                                                      " (in 'string', line 450, column 4 to column 135)",
                                                      " (in 'string', line 453, column 42 to column 86)",
                                                      " (in 'string', line 453, column 4 to column 156)",
                                                      " (in 'string', line 456, column 52 to column 67)",
                                                      " (in 'string', line 456, column 4 to column 108)",
                                                      " (in 'string', line 459, column 20 to column 35)",
                                                      " (in 'string', line 459, column 4 to column 76)",
                                                      " (in 'string', line 465, column 6 to column 156)",
                                                      " (in 'string', line 462, column 62 to line 467, column 5)",
                                                      " (in 'string', line 462, column 4 to line 467, column 5)",
                                                      " (in 'string', line 476, column 65 to column 106)",
                                                      " (in 'string', line 476, column 6 to column 106)",
                                                      " (in 'string', line 479, column 65 to column 149)",
                                                      " (in 'string', line 479, column 6 to column 149)",
                                                      " (in 'string', line 482, column 6 to column 96)",
                                                      " (in 'string', line 490, column 10 to column 90)",
                                                      " (in 'string', line 492, column 85 to column 319)",
                                                      " (in 'string', line 492, column 10 to column 319)",
                                                      " (in 'string', line 495, column 10 to column 207)",
                                                      " (in 'string', line 487, column 36 to line 497, column 9)",
                                                      " (in 'string', line 487, column 8 to line 497, column 9)",
                                                      " (in 'string', line 485, column 36 to line 499, column 7)",
                                                      " (in 'string', line 485, column 6 to line 499, column 7)",
                                                      " (in 'string', line 473, column 11 to line 501, column 5)",
                                                      " (in 'string', line 471, column 36 to column 137)",
                                                      " (in 'string', line 471, column 6 to column 137)",
                                                      " (in 'string', line 469, column 32 to line 473, column 5)",
                                                      " (in 'string', line 469, column 4 to line 501, column 5)",
                                                      " (in 'string', line 505, column 6 to column 90)",
                                                      " (in 'string', line 503, column 34 to line 507, column 5)",
                                                      " (in 'string', line 503, column 4 to line 507, column 5)",
                                                      " (in 'string', line 511, column 4 to column 28)",
                                                      " (in 'string', line 423, column 128 to line 513, column 3)",
                                                      " (in 'string', line 520, column 4 to column 54)",
                                                      " (in 'string', line 523, column 29 to column 48)",
                                                      " (in 'string', line 523, column 4 to column 86)",
                                                      " (in 'string', line 526, column 29 to column 48)",
                                                      " (in 'string', line 526, column 4 to column 86)",
                                                      " (in 'string', line 529, column 4 to column 93)",
                                                      " (in 'string', line 532, column 4 to column 29)",
                                                      " (in 'string', line 535, column 4 to column 33)",
                                                      " (in 'string', line 538, column 4 to column 22)",
                                                      " (in 'string', line 548, column 8 to column 53)",
                                                      " (in 'string', line 550, column 8 to column 53)",
                                                      " (in 'string', line 546, column 40 to line 552, column 7)",
                                                      " (in 'string', line 546, column 6 to line 552, column 7)",
                                                      " (in 'string', line 554, column 6 to column 129)",
                                                      " (in 'string', line 558, column 8 to column 39)",
                                                      " (in 'string', line 556, column 27 to line 560, column 7)",
                                                      " (in 'string', line 556, column 6 to line 560, column 7)",
                                                      " (in 'string', line 562, column 6 to column 82)",
                                                      " (in 'string', line 544, column 11 to line 564, column 5)",
                                                      " (in 'string', line 542, column 6 to column 104)",
                                                      " (in 'string', line 540, column 42 to line 544, column 5)",
                                                      " (in 'string', line 540, column 4 to line 564, column 5)",
                                                      " (in 'string', line 566, column 4 to column 19)",
                                                      " (in 'string', line 517, column 172 to line 568, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
estRodis_stan_scaled_beta_lpdf(const T0__& alpha, const T1__& beta,
                               const T2__& p, const T3__& q, const T4__& x,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 23;
    result = 0;
    current_statement__ = 26;
    if ((primitive_value(logical_gte(x, p)) && primitive_value(
        logical_lte(x, q)))) {
      current_statement__ = 24;
      result = ((pow((x - p), (alpha - 1)) * pow((q - x), (beta - 1))) /
                 (((pow((q - p), ((alpha + beta) - 1)) *
                     stan::math::tgamma(alpha)) * stan::math::tgamma(beta)) /
                   stan::math::tgamma((alpha + beta))));
    } 
    current_statement__ = 27;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct estRodis_stan_scaled_beta_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& alpha, const T1__& beta, const T2__& p, const T3__& q,
           const T4__& x, std::ostream* pstream__)  const 
{
return estRodis_stan_scaled_beta_lpdf<propto__>(alpha, beta, p, q, x,
         pstream__);
}
};
template <typename T0__>
int
determine_scaling_factor(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int result;
    result = std::numeric_limits<int>::min();
    
    current_statement__ = 29;
    result = 0;
    current_statement__ = 35;
    if (logical_gte(x, 1000)) {
      current_statement__ = 33;
      result = 1000;
    } else {
      current_statement__ = 31;
      while (logical_lt(result, x)) {
        current_statement__ = 30;
        result = (result + 1);
      }
    }
    current_statement__ = 36;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct determine_scaling_factor_functor__ {
template <typename T0__>
int
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return determine_scaling_factor(x, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
function_extinction(const T0__& x, const T1__& R, const T2__& k,
                    const T3__& mutation_proba, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 38;
    return (x -
             (1 / pow((1 + (((R * (1 - mutation_proba)) * (1 - x)) / k)), k)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct function_extinction_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const T1__& R, const T2__& k,
           const T3__& mutation_proba, std::ostream* pstream__)  const 
{
return function_extinction(x, R, k, mutation_proba, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
derivative_function_extinction(const T0__& x, const T1__& R, const T2__& k,
                               const T3__& mutation_proba,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 40;
    return (1 +
             (((k * 1) /
                pow((1 + (((R * (1 - mutation_proba)) * (1 - x)) / k)),
                  (k + 1))) * ((-R / k) * (1 - mutation_proba))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct derivative_function_extinction_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const T1__& R, const T2__& k,
           const T3__& mutation_proba, std::ostream* pstream__)  const 
{
return derivative_function_extinction(x, R, k, mutation_proba, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<T0__>
absolute_value(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 42;
    result = 0;
    current_statement__ = 47;
    if (logical_gte(x, 0)) {
      current_statement__ = 45;
      result = x;
    } else {
      current_statement__ = 43;
      result = -x;
    }
    current_statement__ = 48;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct absolute_value_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return absolute_value(x, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T4__,
T5__>
root_newton_extinction(const T0__& R, const T1__& k,
                       const T2__& mutation_proba, const int& max_iter,
                       const T4__& tol, const T5__& initial_guess,
                       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T4__,
          T5__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_n;
    x_n = DUMMY_VAR__;
    
    current_statement__ = 50;
    x_n = -1;
    local_scalar_t__ x_n_p_one;
    x_n_p_one = DUMMY_VAR__;
    
    current_statement__ = 51;
    x_n_p_one = initial_guess;
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 52;
    index = 1;
    current_statement__ = 57;
    while ((primitive_value(
           logical_gte(absolute_value((x_n_p_one - x_n), pstream__), tol)) &&
           primitive_value(logical_lte(index, max_iter)))) {
      current_statement__ = 53;
      x_n = x_n_p_one;
      current_statement__ = 54;
      x_n_p_one = (x_n -
                    (function_extinction(x_n, R, k,
                       mutation_proba, pstream__) /
                      derivative_function_extinction(x_n, R, k,
                        mutation_proba, pstream__)));
      current_statement__ = 55;
      index = (index + 1);
    }
    current_statement__ = 58;
    return x_n_p_one;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct root_newton_extinction_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T4__,
typename T5__>
stan::promote_args_t<T0__, T1__, T2__, T4__,
T5__>
operator()(const T0__& R, const T1__& k, const T2__& mutation_proba,
           const int& max_iter, const T4__& tol, const T5__& initial_guess,
           std::ostream* pstream__)  const 
{
return root_newton_extinction(R, k, mutation_proba, max_iter, tol,
         initial_guess, pstream__);
}
};
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__>
stan::promote_args_t<T3__, T4__, T5__, T6__,
T7__>
estRodis_stan_likelihood_log_smart(const std::vector<int>& clusters_size,
                                   const std::vector<int>& clusters_freq,
                                   const int& upper_limit_cluster_size,
                                   const T3__& R, const T4__& k,
                                   const T5__& mutation_proba,
                                   const T6__& detection_proba,
                                   const T7__& tol_inf,
                                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          T6__,
          T7__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_clusters_size;
    n_clusters_size = std::numeric_limits<int>::min();
    
    current_statement__ = 60;
    n_clusters_size = num_elements(clusters_size);
    int max_cluster_size;
    max_cluster_size = std::numeric_limits<int>::min();
    
    current_statement__ = 61;
    max_cluster_size = std::max(max(clusters_size), upper_limit_cluster_size);
    int upper_limit_size_identical_sequence_clusters;
    upper_limit_size_identical_sequence_clusters = std::numeric_limits<int>::min();
    
    current_statement__ = 62;
    upper_limit_size_identical_sequence_clusters = std::max(
                                                     (determine_scaling_factor(
                                                        (2 / detection_proba), pstream__)
                                                       * max_cluster_size),
                                                     (max_cluster_size + 500));
    local_scalar_t__ log_R_d_k;
    log_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 63;
    log_R_d_k = stan::math::log(((R * (1 - mutation_proba)) / k));
    local_scalar_t__ log_one_p_R_d_k;
    log_one_p_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 64;
    log_one_p_R_d_k = stan::math::log((1 + ((R * (1 - mutation_proba)) / k)));
    local_scalar_t__ log_detection_proba;
    log_detection_proba = DUMMY_VAR__;
    
    local_scalar_t__ log_1_m_detection_proba;
    log_1_m_detection_proba = DUMMY_VAR__;
    
    current_statement__ = 67;
    validate_non_negative_index("log_sums",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> log_sums;
    log_sums = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 68;
    assign(log_sums, nil_index_list(),
      rep_array(0.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable log_sums");
    current_statement__ = 69;
    validate_non_negative_index("result_temp",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> result_temp;
    result_temp = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 70;
    assign(result_temp, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable result_temp");
    current_statement__ = 71;
    validate_non_negative_index("distribution_size_ident_seq_cluster",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> distribution_size_ident_seq_cluster;
    distribution_size_ident_seq_cluster = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 72;
    assign(distribution_size_ident_seq_cluster, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable distribution_size_ident_seq_cluster");
    local_scalar_t__ log_proba_detect_ident_seq_tree_size_zero;
    log_proba_detect_ident_seq_tree_size_zero = DUMMY_VAR__;
    
    current_statement__ = 73;
    log_proba_detect_ident_seq_tree_size_zero = -10000.0;
    local_scalar_t__ log_proba_detect_ident_seq_tree_size_bigger_zero;
    log_proba_detect_ident_seq_tree_size_bigger_zero = DUMMY_VAR__;
    
    current_statement__ = 74;
    log_proba_detect_ident_seq_tree_size_bigger_zero = -10000.0;
    current_statement__ = 75;
    validate_non_negative_index("distribution_size_ident_seq_cluster_detection",
                                "max_cluster_size + 1",
                                (max_cluster_size + 1));
    std::vector<local_scalar_t__> distribution_size_ident_seq_cluster_detection;
    distribution_size_ident_seq_cluster_detection = std::vector<local_scalar_t__>(
      (max_cluster_size + 1), DUMMY_VAR__);
    
    current_statement__ = 76;
    assign(distribution_size_ident_seq_cluster_detection, nil_index_list(),
      rep_array(-10000.0, (max_cluster_size + 1)),
      "assigning variable distribution_size_ident_seq_cluster_detection");
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 77;
    index = 1;
    local_scalar_t__ extinction_proba_zero;
    extinction_proba_zero = DUMMY_VAR__;
    
    current_statement__ = 78;
    extinction_proba_zero = root_newton_extinction(R, k, mutation_proba,
                              1000, 1e-12, 0.5, pstream__);
    local_scalar_t__ extinction_proba;
    extinction_proba = DUMMY_VAR__;
    
    current_statement__ = 79;
    extinction_proba = 0;
    local_scalar_t__ proba_inf;
    proba_inf = DUMMY_VAR__;
    
    current_statement__ = 80;
    proba_inf = 0;
    int do_calculation;
    do_calculation = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    do_calculation = 0;
    int start_of_infinity;
    start_of_infinity = std::numeric_limits<int>::min();
    
    current_statement__ = 82;
    start_of_infinity = max_cluster_size;
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 83;
    result = 0;
    current_statement__ = 86;
    for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
      current_statement__ = 84;
      assign(distribution_size_ident_seq_cluster,
        cons_list(index_uni(ii), nil_index_list()),
        ((((stan::math::lgamma((((k * ii) + ii) - 1)) -
             stan::math::lgamma((k * ii))) - stan::math::lgamma((ii + 1))) +
           ((ii - 1) * log_R_d_k)) -
          ((((k * ii) + ii) - 1) * log_one_p_R_d_k)),
        "assigning variable distribution_size_ident_seq_cluster");}
    current_statement__ = 156;
    if (logical_eq(detection_proba, 1.0)) {
      current_statement__ = 140;
      for (int ii = 1; ii <= max_cluster_size; ++ii) {
        current_statement__ = 139;
        assign(distribution_size_ident_seq_cluster_detection,
          cons_list(index_uni(ii), nil_index_list()),
          distribution_size_ident_seq_cluster[(ii - 1)],
          "assigning variable distribution_size_ident_seq_cluster_detection");
      }
      current_statement__ = 141;
      extinction_proba = extinction_proba_zero;
      current_statement__ = 142;
      proba_inf = (1 - extinction_proba);
      current_statement__ = 147;
      if (logical_gt(proba_inf, 0.0)) {
        current_statement__ = 145;
        assign(distribution_size_ident_seq_cluster_detection,
          cons_list(index_uni((max_cluster_size + 1)), nil_index_list()),
          stan::math::log(proba_inf),
          "assigning variable distribution_size_ident_seq_cluster_detection");
      } else {
        current_statement__ = 143;
        assign(distribution_size_ident_seq_cluster_detection,
          cons_list(index_uni((max_cluster_size + 1)), nil_index_list()),
          -10000.0,
          "assigning variable distribution_size_ident_seq_cluster_detection");
      }
      current_statement__ = 154;
      for (int jj = 2; jj <= max_cluster_size; ++jj) {
        current_statement__ = 152;
        if (logical_eq(start_of_infinity, max_cluster_size)) {
          current_statement__ = 150;
          if (logical_lt(
                ((extinction_proba -
                   sum(
                     stan::math::exp(
                       rvalue(distribution_size_ident_seq_cluster_detection,
                         cons_list(index_min_max(1, (jj - 1)),
                           nil_index_list()),
                         "distribution_size_ident_seq_cluster_detection"))))
                  /
                  (1 -
                    sum(
                      stan::math::exp(
                        rvalue(distribution_size_ident_seq_cluster_detection,
                          cons_list(index_min_max(1, (jj - 1)),
                            nil_index_list()),
                          "distribution_size_ident_seq_cluster_detection"))))),
                tol_inf)) {
            current_statement__ = 148;
            start_of_infinity = jj;
          } 
        } }
    } else {
      current_statement__ = 87;
      log_detection_proba = stan::math::log(detection_proba);
      current_statement__ = 88;
      log_1_m_detection_proba = stan::math::log((1 - detection_proba));
      current_statement__ = 90;
      for (int ii = 2; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 89;
        assign(log_sums, cons_list(index_uni(ii), nil_index_list()),
          (log_sums[(ii - 1)] +
            (log_sums[((ii - 1) - 1)] + stan::math::log(ii))),
          "assigning variable log_sums");}
      current_statement__ = 92;
      for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 91;
        assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
          ((ii * log_1_m_detection_proba) +
            distribution_size_ident_seq_cluster[(ii - 1)]),
          "assigning variable result_temp");}
      current_statement__ = 93;
      log_proba_detect_ident_seq_tree_size_zero = log_sum_exp(result_temp);
      current_statement__ = 94;
      log_proba_detect_ident_seq_tree_size_bigger_zero = stan::math::log(
                                                           (1 -
                                                             stan::math::exp(
                                                               log_proba_detect_ident_seq_tree_size_zero)));
      current_statement__ = 95;
      extinction_proba = (stan::math::floor(
                            ((1e12 *
                               (extinction_proba_zero -
                                 stan::math::exp(
                                   log_proba_detect_ident_seq_tree_size_zero)))
                              /
                              stan::math::exp(
                                log_proba_detect_ident_seq_tree_size_bigger_zero)))
                           / 1e12);
      current_statement__ = 96;
      proba_inf = (1 - extinction_proba);
      current_statement__ = 101;
      if (logical_gt(proba_inf, 0.0)) {
        current_statement__ = 99;
        assign(distribution_size_ident_seq_cluster_detection,
          cons_list(index_uni((max_cluster_size + 1)), nil_index_list()),
          stan::math::log(proba_inf),
          "assigning variable distribution_size_ident_seq_cluster_detection");
      } else {
        current_statement__ = 97;
        assign(distribution_size_ident_seq_cluster_detection,
          cons_list(index_uni((max_cluster_size + 1)), nil_index_list()),
          -10000.0,
          "assigning variable distribution_size_ident_seq_cluster_detection");
      }
      current_statement__ = 137;
      for (int jj = 1; jj <= max_cluster_size; ++jj) {
        current_statement__ = 107;
        if (logical_eq(jj, 1)) {
          current_statement__ = 102;
          do_calculation = 1;
          current_statement__ = 105;
          if (logical_eq(jj, clusters_size[(index - 1)])) {
            current_statement__ = 103;
            index = (index + 1);
          } 
        } 
        current_statement__ = 129;
        if (logical_gte(jj, 2)) {
          current_statement__ = 127;
          if (logical_lt((R * (1 - mutation_proba)), 1)) {
            current_statement__ = 125;
            if (logical_eq(jj, clusters_size[(index - 1)])) {
              current_statement__ = 122;
              do_calculation = 1;
              current_statement__ = 123;
              index = (index + 1);
            } else {
              current_statement__ = 120;
              do_calculation = 0;
            }
          } else {
            current_statement__ = 118;
            if (logical_lt(jj, start_of_infinity)) {
              current_statement__ = 116;
              if (logical_lt(
                    ((extinction_proba -
                       sum(
                         stan::math::exp(
                           rvalue(
                             distribution_size_ident_seq_cluster_detection,
                             cons_list(index_min_max(1, (jj - 1)),
                               nil_index_list()),
                             "distribution_size_ident_seq_cluster_detection"))))
                      /
                      (1 -
                        sum(
                          stan::math::exp(
                            rvalue(
                              distribution_size_ident_seq_cluster_detection,
                              cons_list(index_min_max(1, (jj - 1)),
                                nil_index_list()),
                              "distribution_size_ident_seq_cluster_detection"))))),
                    tol_inf)) {
                current_statement__ = 112;
                do_calculation = 0;
                current_statement__ = 113;
                start_of_infinity = jj;
                current_statement__ = 114;
                assign(distribution_size_ident_seq_cluster_detection,
                  cons_list(index_uni((max_cluster_size + 1)),
                    nil_index_list()),
                  stan::math::log(
                    (1 -
                      sum(
                        stan::math::exp(
                          rvalue(
                            distribution_size_ident_seq_cluster_detection,
                            cons_list(index_min_max(1, max_cluster_size),
                              nil_index_list()),
                            "distribution_size_ident_seq_cluster_detection"))))),
                  "assigning variable distribution_size_ident_seq_cluster_detection");
              } else {
                current_statement__ = 110;
                do_calculation = 1;
              }
            } else {
              current_statement__ = 108;
              do_calculation = 0;
            }
          }
        } 
        current_statement__ = 135;
        if (logical_eq(do_calculation, 1)) {
          current_statement__ = 130;
          assign(result_temp, nil_index_list(),
            rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
            "assigning variable result_temp");
          current_statement__ = 132;
          for (int ii = jj; ii <= max_cluster_size; ++ii) {
            current_statement__ = 131;
            assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
              (((((log_sums[(ii - 1)] - log_sums[(jj - 1)]) -
                   log_sums[(std::max((ii - jj), 1) - 1)]) +
                  (jj * log_detection_proba)) +
                 ((ii - jj) * log_1_m_detection_proba)) +
                distribution_size_ident_seq_cluster[(ii - 1)]),
              "assigning variable result_temp");}
          current_statement__ = 133;
          assign(distribution_size_ident_seq_cluster_detection,
            cons_list(index_uni(jj), nil_index_list()),
            (log_sum_exp(
               tail(result_temp,
                 ((upper_limit_size_identical_sequence_clusters - jj) + 1)))
              - log_proba_detect_ident_seq_tree_size_bigger_zero),
            "assigning variable distribution_size_ident_seq_cluster_detection");
        } }
    }
    current_statement__ = 163;
    for (int ii = 1; ii <= n_clusters_size; ++ii) {
      current_statement__ = 161;
      if (logical_lt(clusters_size[(ii - 1)], start_of_infinity)) {
        current_statement__ = 159;
        result = (result +
                   (clusters_freq[(ii - 1)] *
                     distribution_size_ident_seq_cluster_detection[(clusters_size[
                                                                    (ii - 1)]
                                                                    - 1)]));
      } else {
        current_statement__ = 157;
        result = (result +
                   (clusters_freq[(ii - 1)] *
                     distribution_size_ident_seq_cluster_detection[((max_cluster_size
                                                                    + 1) - 1)]));
      }}
    current_statement__ = 164;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct estRodis_stan_likelihood_log_smart_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__>
stan::promote_args_t<T3__, T4__, T5__, T6__,
T7__>
operator()(const std::vector<int>& clusters_size,
           const std::vector<int>& clusters_freq,
           const int& upper_limit_cluster_size, const T3__& R, const T4__& k,
           const T5__& mutation_proba, const T6__& detection_proba,
           const T7__& tol_inf, std::ostream* pstream__)  const 
{
return estRodis_stan_likelihood_log_smart(clusters_size, clusters_freq,
         upper_limit_cluster_size, R, k, mutation_proba, detection_proba,
         tol_inf, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
stan_cluster_size_proba_bigger_zero(const int& max_cluster_size,
                                    const T1__& R, const T2__& k,
                                    const T3__& mutation_proba,
                                    const T4__& detection_proba,
                                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__, T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int upper_limit_size_identical_sequence_clusters;
    upper_limit_size_identical_sequence_clusters = std::numeric_limits<int>::min();
    
    current_statement__ = 166;
    upper_limit_size_identical_sequence_clusters = std::max(
                                                     (determine_scaling_factor(
                                                        (2 / detection_proba), pstream__)
                                                       * max_cluster_size),
                                                     (max_cluster_size + 500));
    local_scalar_t__ log_R_d_k;
    log_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 167;
    log_R_d_k = stan::math::log(((R * (1 - mutation_proba)) / k));
    local_scalar_t__ log_one_p_R_d_k;
    log_one_p_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 168;
    log_one_p_R_d_k = stan::math::log((1 + ((R * (1 - mutation_proba)) / k)));
    local_scalar_t__ log_detection_proba;
    log_detection_proba = DUMMY_VAR__;
    
    local_scalar_t__ log_1_m_detection_proba;
    log_1_m_detection_proba = DUMMY_VAR__;
    
    current_statement__ = 171;
    validate_non_negative_index("log_sums",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> log_sums;
    log_sums = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 172;
    assign(log_sums, nil_index_list(),
      rep_array(0.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable log_sums");
    current_statement__ = 173;
    validate_non_negative_index("result_temp",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> result_temp;
    result_temp = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 174;
    assign(result_temp, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable result_temp");
    current_statement__ = 175;
    validate_non_negative_index("distribution_size_ident_seq_tree",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree;
    distribution_size_ident_seq_tree = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 176;
    assign(distribution_size_ident_seq_tree, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable distribution_size_ident_seq_tree");
    local_scalar_t__ proba_detect_ident_seq_tree_size_bigger_zero;
    proba_detect_ident_seq_tree_size_bigger_zero = DUMMY_VAR__;
    
    current_statement__ = 177;
    proba_detect_ident_seq_tree_size_bigger_zero = 1;
    current_statement__ = 180;
    for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
      current_statement__ = 178;
      assign(distribution_size_ident_seq_tree,
        cons_list(index_uni(ii), nil_index_list()),
        ((((stan::math::lgamma((((k * ii) + ii) - 1)) -
             stan::math::lgamma((k * ii))) - stan::math::lgamma((ii + 1))) +
           ((ii - 1) * log_R_d_k)) -
          ((((k * ii) + ii) - 1) * log_one_p_R_d_k)),
        "assigning variable distribution_size_ident_seq_tree");}
    current_statement__ = 191;
    if (logical_eq(detection_proba, 1.0)) {
      current_statement__ = 189;
      proba_detect_ident_seq_tree_size_bigger_zero = 1;
    } else {
      current_statement__ = 181;
      log_detection_proba = stan::math::log(detection_proba);
      current_statement__ = 182;
      log_1_m_detection_proba = stan::math::log((1 - detection_proba));
      current_statement__ = 184;
      for (int ii = 2; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 183;
        assign(log_sums, cons_list(index_uni(ii), nil_index_list()),
          (log_sums[(ii - 1)] +
            (log_sums[((ii - 1) - 1)] + stan::math::log(ii))),
          "assigning variable log_sums");}
      current_statement__ = 186;
      for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 185;
        assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
          ((ii * log_1_m_detection_proba) +
            distribution_size_ident_seq_tree[(ii - 1)]),
          "assigning variable result_temp");}
      current_statement__ = 187;
      proba_detect_ident_seq_tree_size_bigger_zero = (1 -
                                                       stan::math::exp(
                                                         log_sum_exp(
                                                           result_temp)));
    }
    current_statement__ = 192;
    return proba_detect_ident_seq_tree_size_bigger_zero;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct stan_cluster_size_proba_bigger_zero_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
operator()(const int& max_cluster_size, const T1__& R, const T2__& k,
           const T3__& mutation_proba, const T4__& detection_proba,
           std::ostream* pstream__)  const 
{
return stan_cluster_size_proba_bigger_zero(max_cluster_size, R, k,
         mutation_proba, detection_proba, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
stan_proba_inf(const int& max_cluster_size, const T1__& R, const T2__& k,
               const T3__& mutation_proba, const T4__& detection_proba,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__, T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ extinction_proba_zero;
    extinction_proba_zero = DUMMY_VAR__;
    
    current_statement__ = 194;
    extinction_proba_zero = root_newton_extinction(R, k, mutation_proba,
                              1000, 1e-12, 0.5, pstream__);
    local_scalar_t__ proba_bigger_zero;
    proba_bigger_zero = DUMMY_VAR__;
    
    current_statement__ = 195;
    proba_bigger_zero = stan_cluster_size_proba_bigger_zero(max_cluster_size,
                          R, k, mutation_proba, detection_proba, pstream__);
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 196;
    result = (1 -
               ((extinction_proba_zero - (1 - proba_bigger_zero)) /
                 proba_bigger_zero));
    current_statement__ = 197;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct stan_proba_inf_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, T2__, T3__,
T4__>
operator()(const int& max_cluster_size, const T1__& R, const T2__& k,
           const T3__& mutation_proba, const T4__& detection_proba,
           std::ostream* pstream__)  const 
{
return stan_proba_inf(max_cluster_size, R, k, mutation_proba,
         detection_proba, pstream__);
}
};
template <bool propto__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T2__, T3__, T4__,
T5__>
stan_likelihood_log(const std::vector<int>& clusters_size,
                    const std::vector<int>& clusters_freq, const T2__& R,
                    const T3__& k, const T4__& mutation_proba,
                    const T5__& detection_proba, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__, T4__, T5__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_clusters_size;
    n_clusters_size = std::numeric_limits<int>::min();
    
    current_statement__ = 199;
    n_clusters_size = num_elements(clusters_size);
    int upper_limit_size_identical_sequence_clusters;
    upper_limit_size_identical_sequence_clusters = std::numeric_limits<int>::min();
    
    current_statement__ = 200;
    upper_limit_size_identical_sequence_clusters = std::max(
                                                     (determine_scaling_factor(
                                                        (2 / detection_proba), pstream__)
                                                       * max(clusters_size)),
                                                     (max(clusters_size) +
                                                       500));
    local_scalar_t__ log_R_d_k;
    log_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 201;
    log_R_d_k = stan::math::log(((R * (1 - mutation_proba)) / k));
    local_scalar_t__ log_one_p_R_d_k;
    log_one_p_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 202;
    log_one_p_R_d_k = stan::math::log((1 + ((R * (1 - mutation_proba)) / k)));
    local_scalar_t__ log_detection_proba;
    log_detection_proba = DUMMY_VAR__;
    
    current_statement__ = 203;
    log_detection_proba = stan::math::log(detection_proba);
    local_scalar_t__ log_1_m_detection_proba;
    log_1_m_detection_proba = DUMMY_VAR__;
    
    current_statement__ = 204;
    log_1_m_detection_proba = stan::math::log((1 - detection_proba));
    local_scalar_t__ log_proba_detect_ident_seq_tree_size_bigger_zero;
    log_proba_detect_ident_seq_tree_size_bigger_zero = DUMMY_VAR__;
    
    current_statement__ = 206;
    validate_non_negative_index("log_sums",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> log_sums;
    log_sums = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 207;
    assign(log_sums, nil_index_list(),
      rep_array(0.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable log_sums");
    current_statement__ = 208;
    validate_non_negative_index("result_temp",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> result_temp;
    result_temp = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 209;
    assign(result_temp, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable result_temp");
    current_statement__ = 210;
    validate_non_negative_index("distribution_size_ident_seq_tree",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree;
    distribution_size_ident_seq_tree = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 211;
    assign(distribution_size_ident_seq_tree, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable distribution_size_ident_seq_tree");
    current_statement__ = 212;
    validate_non_negative_index("distribution_size_ident_seq_tree_detection",
                                "n_clusters_size", n_clusters_size);
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree_detection;
    distribution_size_ident_seq_tree_detection = std::vector<local_scalar_t__>(n_clusters_size, DUMMY_VAR__);
    
    current_statement__ = 213;
    assign(distribution_size_ident_seq_tree_detection, nil_index_list(),
      rep_array(-10000.0, n_clusters_size),
      "assigning variable distribution_size_ident_seq_tree_detection");
    current_statement__ = 214;
    validate_non_negative_index("likelihood", "n_clusters_size",
                                n_clusters_size);
    std::vector<local_scalar_t__> likelihood;
    likelihood = std::vector<local_scalar_t__>(n_clusters_size, DUMMY_VAR__);
    
    current_statement__ = 215;
    assign(likelihood, nil_index_list(),
      rep_array(-10000.0, n_clusters_size), "assigning variable likelihood");
    current_statement__ = 218;
    for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
      current_statement__ = 216;
      assign(distribution_size_ident_seq_tree,
        cons_list(index_uni(ii), nil_index_list()),
        ((((stan::math::lgamma((((k * ii) + ii) - 1)) -
             stan::math::lgamma((k * ii))) - stan::math::lgamma((ii + 1))) +
           ((ii - 1) * log_R_d_k)) -
          ((((k * ii) + ii) - 1) * log_one_p_R_d_k)),
        "assigning variable distribution_size_ident_seq_tree");}
    current_statement__ = 236;
    if (logical_eq(detection_proba, 1.0)) {
      current_statement__ = 234;
      for (int ii = 1; ii <= n_clusters_size; ++ii) {
        current_statement__ = 233;
        assign(distribution_size_ident_seq_tree_detection,
          cons_list(index_uni(ii), nil_index_list()),
          distribution_size_ident_seq_tree[(clusters_size[(ii - 1)] - 1)],
          "assigning variable distribution_size_ident_seq_tree_detection");}
    } else {
      current_statement__ = 220;
      for (int ii = 2; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 219;
        assign(log_sums, cons_list(index_uni(ii), nil_index_list()),
          (log_sums[(ii - 1)] +
            (log_sums[((ii - 1) - 1)] + stan::math::log(ii))),
          "assigning variable log_sums");}
      current_statement__ = 222;
      for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 221;
        assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
          ((ii * log_1_m_detection_proba) +
            distribution_size_ident_seq_tree[(ii - 1)]),
          "assigning variable result_temp");}
      current_statement__ = 223;
      log_proba_detect_ident_seq_tree_size_bigger_zero = stan::math::log(
                                                           (1 -
                                                             stan::math::exp(
                                                               log_sum_exp(
                                                                 result_temp))));
      current_statement__ = 231;
      for (int jj = 1; jj <= n_clusters_size; ++jj) {
        current_statement__ = 229;
        if (logical_neq(clusters_freq[(jj - 1)], 0)) {
          current_statement__ = 224;
          assign(result_temp, nil_index_list(),
            rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
            "assigning variable result_temp");
          current_statement__ = 226;
          for (int ii = clusters_size[(jj - 1)];
               ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
            current_statement__ = 225;
            assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
              (((((log_sums[(ii - 1)] -
                    log_sums[(clusters_size[(jj - 1)] - 1)]) -
                   log_sums[(std::max((ii - clusters_size[(jj - 1)]), 1) - 1)])
                  + (clusters_size[(jj - 1)] * log_detection_proba)) +
                 ((ii - clusters_size[(jj - 1)]) * log_1_m_detection_proba))
                + distribution_size_ident_seq_tree[(ii - 1)]),
              "assigning variable result_temp");}
          current_statement__ = 227;
          assign(distribution_size_ident_seq_tree_detection,
            cons_list(index_uni(jj), nil_index_list()),
            (log_sum_exp(
               tail(result_temp,
                 ((upper_limit_size_identical_sequence_clusters -
                    clusters_size[(jj - 1)]) + 1))) -
              log_proba_detect_ident_seq_tree_size_bigger_zero),
            "assigning variable distribution_size_ident_seq_tree_detection");
        } }
    }
    current_statement__ = 239;
    for (int ii = 1; ii <= n_clusters_size; ++ii) {
      current_statement__ = 237;
      assign(likelihood, cons_list(index_uni(ii), nil_index_list()),
        (clusters_freq[(ii - 1)] *
          distribution_size_ident_seq_tree_detection[(ii - 1)]),
        "assigning variable likelihood");}
    current_statement__ = 240;
    return sum(likelihood);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct stan_likelihood_log_functor__ {
template <bool propto__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T2__, T3__, T4__,
T5__>
operator()(const std::vector<int>& clusters_size,
           const std::vector<int>& clusters_freq, const T2__& R,
           const T3__& k, const T4__& mutation_proba,
           const T5__& detection_proba, std::ostream* pstream__)  const 
{
return stan_likelihood_log<propto__>(clusters_size, clusters_freq, R, k,
         mutation_proba, detection_proba, pstream__);
}
};
template <typename T3__, typename T4__, typename T5__, typename T6__>
stan::promote_args_t<T3__, T4__, T5__,
T6__>
estRodis_stan_likelihood_log_inf_improved(const std::vector<int>& clusters_size,
                                          const std::vector<int>& clusters_freq,
                                          const int& max_cluster_size,
                                          const T3__& R, const T4__& k,
                                          const T5__& mutation_proba,
                                          const T6__& detection_proba,
                                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__, T4__, T5__, T6__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_clusters_size;
    n_clusters_size = std::numeric_limits<int>::min();
    
    current_statement__ = 242;
    n_clusters_size = num_elements(clusters_size);
    current_statement__ = 243;
    validate_non_negative_index("clusters_size_finite",
                                "n_clusters_size - 1", (n_clusters_size - 1));
    std::vector<int> clusters_size_finite;
    clusters_size_finite = std::vector<int>((n_clusters_size - 1), std::numeric_limits<int>::min());
    
    current_statement__ = 244;
    assign(clusters_size_finite, nil_index_list(),
      rep_array(0, (n_clusters_size - 1)),
      "assigning variable clusters_size_finite");
    current_statement__ = 245;
    validate_non_negative_index("clusters_freq_finite",
                                "n_clusters_size - 1", (n_clusters_size - 1));
    std::vector<int> clusters_freq_finite;
    clusters_freq_finite = std::vector<int>((n_clusters_size - 1), std::numeric_limits<int>::min());
    
    current_statement__ = 246;
    assign(clusters_freq_finite, nil_index_list(),
      rep_array(0, (n_clusters_size - 1)),
      "assigning variable clusters_freq_finite");
    local_scalar_t__ proba_inf;
    proba_inf = DUMMY_VAR__;
    
    current_statement__ = 247;
    proba_inf = stan_proba_inf(max_cluster_size, R, k, mutation_proba,
                  detection_proba, pstream__);
    local_scalar_t__ log_proba_inf;
    log_proba_inf = DUMMY_VAR__;
    
    current_statement__ = 248;
    log_proba_inf = 0.0;
    local_scalar_t__ likelihood_finite;
    likelihood_finite = DUMMY_VAR__;
    
    current_statement__ = 249;
    likelihood_finite = 0.0;
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 250;
    result = 0.0;
    current_statement__ = 263;
    if (logical_lt(((1.0 - mutation_proba) * R), 1.0)) {
      current_statement__ = 261;
      result = stan_likelihood_log<false>(clusters_size, clusters_freq, R, k,
                 mutation_proba, detection_proba, pstream__);
    } else {
      current_statement__ = 254;
      for (int ii = 1; ii <= (n_clusters_size - 1); ++ii) {
        current_statement__ = 251;
        assign(clusters_size_finite,
          cons_list(index_uni(ii), nil_index_list()),
          clusters_size[(ii - 1)], "assigning variable clusters_size_finite");
        current_statement__ = 252;
        assign(clusters_freq_finite,
          cons_list(index_uni(ii), nil_index_list()),
          clusters_freq[(ii - 1)], "assigning variable clusters_freq_finite");
      }
      current_statement__ = 255;
      likelihood_finite = stan_likelihood_log<false>(clusters_size_finite,
                            clusters_freq_finite, R, k, mutation_proba,
                            detection_proba, pstream__);
      current_statement__ = 258;
      if (logical_gt(proba_inf, 0.0)) {
        current_statement__ = 256;
        log_proba_inf = stan::math::log(proba_inf);
      } 
      current_statement__ = 259;
      result = (likelihood_finite +
                 (clusters_freq[(n_clusters_size - 1)] * log_proba_inf));
    }
    current_statement__ = 264;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct estRodis_stan_likelihood_log_inf_improved_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__>
stan::promote_args_t<T3__, T4__, T5__,
T6__>
operator()(const std::vector<int>& clusters_size,
           const std::vector<int>& clusters_freq,
           const int& max_cluster_size, const T3__& R, const T4__& k,
           const T5__& mutation_proba, const T6__& detection_proba,
           std::ostream* pstream__)  const 
{
return estRodis_stan_likelihood_log_inf_improved(clusters_size,
         clusters_freq, max_cluster_size, R, k, mutation_proba,
         detection_proba, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_estRodis_stan_model_estimate_parameters_test_simple final : public model_base_crtp<model_estRodis_stan_model_estimate_parameters_test_simple> {
private:
  int M;
  std::vector<int> clusters_size;
  std::vector<int> clusters_freq;
  std::vector<double> prior_r;
  std::vector<double> prior_k;
  double mean_generation_interval;
  std::vector<double> prior_number_yearly_mutations;
  std::vector<double> prior_testing;
  double sequencing_proba;
 
public:
  ~model_estRodis_stan_model_estimate_parameters_test_simple() { }
  
  inline std::string model_name() const final { return "model_estRodis_stan_model_estimate_parameters_test_simple"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_estRodis_stan_model_estimate_parameters_test_simple(stan::io::var_context& context__,
                                                            unsigned int random_seed__ = 0,
                                                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_test_simple_namespace::model_estRodis_stan_model_estimate_parameters_test_simple";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 13;
      validate_non_negative_index("clusters_size", "M", M);
      current_statement__ = 14;
      context__.validate_dims("data initialization","clusters_size","int",
          context__.to_vec(M));
      clusters_size = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 14;
      assign(clusters_size, nil_index_list(),
        context__.vals_i("clusters_size"), "assigning variable clusters_size");
      current_statement__ = 15;
      validate_non_negative_index("clusters_freq", "M", M);
      current_statement__ = 16;
      context__.validate_dims("data initialization","clusters_freq","int",
          context__.to_vec(M));
      clusters_freq = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 16;
      assign(clusters_freq, nil_index_list(),
        context__.vals_i("clusters_freq"), "assigning variable clusters_freq");
      current_statement__ = 17;
      context__.validate_dims("data initialization","prior_r","double",
          context__.to_vec(2));
      prior_r = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(prior_r, nil_index_list(), context__.vals_r("prior_r"),
        "assigning variable prior_r");
      current_statement__ = 18;
      context__.validate_dims("data initialization","prior_k","double",
          context__.to_vec(2));
      prior_k = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(prior_k, nil_index_list(), context__.vals_r("prior_k"),
        "assigning variable prior_k");
      current_statement__ = 19;
      context__.validate_dims("data initialization",
          "mean_generation_interval","double",context__.to_vec());
      mean_generation_interval = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      mean_generation_interval = context__.vals_r("mean_generation_interval")[
          (1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization",
          "prior_number_yearly_mutations","double",context__.to_vec(2));
      prior_number_yearly_mutations = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(prior_number_yearly_mutations, nil_index_list(),
        context__.vals_r("prior_number_yearly_mutations"),
        "assigning variable prior_number_yearly_mutations");
      current_statement__ = 21;
      context__.validate_dims("data initialization","prior_testing","double",
          context__.to_vec(4));
      prior_testing = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      assign(prior_testing, nil_index_list(),
        context__.vals_r("prior_testing"), "assigning variable prior_testing");
      current_statement__ = 22;
      context__.validate_dims("data initialization","sequencing_proba",
          "double",context__.to_vec());
      sequencing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      sequencing_proba = context__.vals_r("sequencing_proba")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_test_simple_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ R;
      R = DUMMY_VAR__;
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        R = stan::math::lb_constrain(R, 0, lp__);
      } else {
        current_statement__ = 1;
        R = stan::math::lb_constrain(R, 0);
      }
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      current_statement__ = 2;
      k = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        k = stan::math::lb_constrain(k, 0, lp__);
      } else {
        current_statement__ = 2;
        k = stan::math::lb_constrain(k, 0);
      }
      local_scalar_t__ number_yearly_mutations;
      number_yearly_mutations = DUMMY_VAR__;
      
      current_statement__ = 3;
      number_yearly_mutations = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        number_yearly_mutations = stan::math::lb_constrain(
                                    number_yearly_mutations, 0, lp__);
      } else {
        current_statement__ = 3;
        number_yearly_mutations = stan::math::lb_constrain(
                                    number_yearly_mutations, 0);
      }
      local_scalar_t__ testing_proba;
      testing_proba = DUMMY_VAR__;
      
      current_statement__ = 4;
      testing_proba = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        testing_proba = stan::math::lub_constrain(testing_proba,
                          prior_testing[(3 - 1)], prior_testing[(4 - 1)],
                          lp__);
      } else {
        current_statement__ = 4;
        testing_proba = stan::math::lub_constrain(testing_proba,
                          prior_testing[(3 - 1)], prior_testing[(4 - 1)]);
      }
      local_scalar_t__ mutation_proba;
      mutation_proba = DUMMY_VAR__;
      
      current_statement__ = 5;
      mutation_proba = (1 -
                         stan::math::exp(
                           ((-number_yearly_mutations / 365.25) *
                             mean_generation_interval)));
      local_scalar_t__ detection_proba;
      detection_proba = DUMMY_VAR__;
      
      current_statement__ = 6;
      detection_proba = (testing_proba * sequencing_proba);
      {
        current_statement__ = 7;
        lp_accum__.add(
          gamma_lpdf<propto__>(R, prior_r[(1 - 1)], prior_r[(2 - 1)]));
        current_statement__ = 8;
        lp_accum__.add(
          gamma_lpdf<propto__>(k, prior_k[(1 - 1)], prior_k[(2 - 1)]));
        current_statement__ = 9;
        lp_accum__.add(
          normal_lpdf<propto__>(number_yearly_mutations,
            prior_number_yearly_mutations[(1 - 1)],
            prior_number_yearly_mutations[(2 - 1)]));
        current_statement__ = 10;
        lp_accum__.add(
          estRodis_stan_scaled_beta_lpdf<propto__>(testing_proba,
            prior_testing[(1 - 1)], prior_testing[(2 - 1)],
            prior_testing[(3 - 1)], prior_testing[(4 - 1)], pstream__));
        current_statement__ = 11;
        lp_accum__.add(
          estRodis_stan_likelihood_log_inf_improved(clusters_size,
            clusters_freq, 2500, R, k, mutation_proba,
            detection_proba, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_test_simple_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      R = stan::math::lb_constrain(R, 0);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k = in__.scalar();
      current_statement__ = 2;
      k = stan::math::lb_constrain(k, 0);
      double number_yearly_mutations;
      number_yearly_mutations = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations = in__.scalar();
      current_statement__ = 3;
      number_yearly_mutations = stan::math::lb_constrain(
                                  number_yearly_mutations, 0);
      double testing_proba;
      testing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba = in__.scalar();
      current_statement__ = 4;
      testing_proba = stan::math::lub_constrain(testing_proba,
                        prior_testing[(3 - 1)], prior_testing[(4 - 1)]);
      double mutation_proba;
      mutation_proba = std::numeric_limits<double>::quiet_NaN();
      
      double detection_proba;
      detection_proba = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(R);
      vars__.emplace_back(k);
      vars__.emplace_back(number_yearly_mutations);
      vars__.emplace_back(testing_proba);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      mutation_proba = (1 -
                         stan::math::exp(
                           ((-number_yearly_mutations / 365.25) *
                             mean_generation_interval)));
      current_statement__ = 6;
      detection_proba = (testing_proba * sequencing_proba);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(mutation_proba);
        vars__.emplace_back(detection_proba);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = context__.vals_r("R")[(1 - 1)];
      double R_free__;
      R_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R_free__ = stan::math::lb_free(R, 0);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k = context__.vals_r("k")[(1 - 1)];
      double k_free__;
      k_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k_free__ = stan::math::lb_free(k, 0);
      double number_yearly_mutations;
      number_yearly_mutations = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations = context__.vals_r("number_yearly_mutations")[
          (1 - 1)];
      double number_yearly_mutations_free__;
      number_yearly_mutations_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations_free__ = stan::math::lb_free(
                                         number_yearly_mutations, 0);
      double testing_proba;
      testing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba = context__.vals_r("testing_proba")[(1 - 1)];
      double testing_proba_free__;
      testing_proba_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba_free__ = stan::math::lub_free(testing_proba,
                               prior_testing[(3 - 1)], prior_testing[
                               (4 - 1)]);
      vars__.emplace_back(R_free__);
      vars__.emplace_back(k_free__);
      vars__.emplace_back(number_yearly_mutations_free__);
      vars__.emplace_back(testing_proba_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("R");
    names__.emplace_back("k");
    names__.emplace_back("number_yearly_mutations");
    names__.emplace_back("testing_proba");
    names__.emplace_back("mutation_proba");
    names__.emplace_back("detection_proba");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "number_yearly_mutations");
    param_names__.emplace_back(std::string() + "testing_proba");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mutation_proba");
      param_names__.emplace_back(std::string() + "detection_proba");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "number_yearly_mutations");
    param_names__.emplace_back(std::string() + "testing_proba");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mutation_proba");
      param_names__.emplace_back(std::string() + "detection_proba");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"number_yearly_mutations\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"testing_proba\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mutation_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"detection_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"number_yearly_mutations\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"testing_proba\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mutation_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"detection_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_estRodis_stan_model_estimate_parameters_test_simple_namespace::model_estRodis_stan_model_estimate_parameters_test_simple;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_estRodis_stan_model_estimate_parameters_test_simple_namespace::profiles__;
}
#endif
#endif
