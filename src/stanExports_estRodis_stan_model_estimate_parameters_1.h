// Generated by rstantools.  Do not edit by hand.

/*
    estRodis is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    estRodis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with estRodis.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model_estRodis_stan_model_estimate_parameters_1_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 177, column 2 to column 23)",
                                                      " (in 'string', line 178, column 2 to column 23)",
                                                      " (in 'string', line 179, column 2 to column 45)",
                                                      " (in 'string', line 180, column 2 to column 75)",
                                                      " (in 'string', line 183, column 2 to column 95)",
                                                      " (in 'string', line 184, column 2 to column 58)",
                                                      " (in 'string', line 189, column 2 to column 36)",
                                                      " (in 'string', line 191, column 2 to column 36)",
                                                      " (in 'string', line 193, column 2 to column 103)",
                                                      " (in 'string', line 195, column 2 to column 116)",
                                                      " (in 'string', line 197, column 2 to column 110)",
                                                      " (in 'string', line 157, column 2 to column 22)",
                                                      " (in 'string', line 159, column 20 to column 21)",
                                                      " (in 'string', line 159, column 2 to column 23)",
                                                      " (in 'string', line 161, column 20 to column 21)",
                                                      " (in 'string', line 161, column 2 to column 23)",
                                                      " (in 'string', line 163, column 2 to column 18)",
                                                      " (in 'string', line 165, column 2 to column 18)",
                                                      " (in 'string', line 167, column 2 to column 32)",
                                                      " (in 'string', line 169, column 2 to column 40)",
                                                      " (in 'string', line 172, column 2 to column 24)",
                                                      " (in 'string', line 174, column 2 to column 24)",
                                                      " (in 'string', line 10, column 4 to column 20)",
                                                      " (in 'string', line 14, column 6 to column 133)",
                                                      " (in 'string', line 12, column 27 to line 16, column 5)",
                                                      " (in 'string', line 12, column 4 to line 16, column 5)",
                                                      " (in 'string', line 18, column 4 to column 19)",
                                                      " (in 'string', line 8, column 85 to line 20, column 3)",
                                                      " (in 'string', line 26, column 4 to column 19)",
                                                      " (in 'string', line 34, column 25 to column 37)",
                                                      " (in 'string', line 34, column 6 to column 37)",
                                                      " (in 'string', line 32, column 11 to line 36, column 5)",
                                                      " (in 'string', line 30, column 6 to column 20)",
                                                      " (in 'string', line 28, column 19 to line 32, column 5)",
                                                      " (in 'string', line 28, column 4 to line 36, column 5)",
                                                      " (in 'string', line 38, column 4 to column 19)",
                                                      " (in 'string', line 24, column 39 to line 40, column 3)",
                                                      " (in 'string', line 52, column 4 to column 54)",
                                                      " (in 'string', line 55, column 4 to column 153)",
                                                      " (in 'string', line 58, column 4 to column 18)",
                                                      " (in 'string', line 61, column 4 to column 55)",
                                                      " (in 'string', line 64, column 4 to column 65)",
                                                      " (in 'string', line 67, column 4 to column 29)",
                                                      " (in 'string', line 70, column 4 to column 33)",
                                                      " (in 'string', line 73, column 4 to column 58)",
                                                      " (in 'string', line 76, column 18 to column 62)",
                                                      " (in 'string', line 76, column 4 to column 127)",
                                                      " (in 'string', line 79, column 21 to column 65)",
                                                      " (in 'string', line 79, column 4 to column 135)",
                                                      " (in 'string', line 82, column 42 to column 86)",
                                                      " (in 'string', line 82, column 4 to column 156)",
                                                      " (in 'string', line 85, column 54 to column 73)",
                                                      " (in 'string', line 85, column 4 to column 119)",
                                                      " (in 'string', line 88, column 52 to column 67)",
                                                      " (in 'string', line 88, column 4 to column 108)",
                                                      " (in 'string', line 91, column 20 to column 35)",
                                                      " (in 'string', line 91, column 4 to column 76)",
                                                      " (in 'string', line 97, column 6 to column 156)",
                                                      " (in 'string', line 94, column 62 to line 99, column 5)",
                                                      " (in 'string', line 94, column 4 to line 99, column 5)",
                                                      " (in 'string', line 108, column 6 to column 49)",
                                                      " (in 'string', line 111, column 6 to column 57)",
                                                      " (in 'string', line 114, column 65 to column 106)",
                                                      " (in 'string', line 114, column 6 to column 106)",
                                                      " (in 'string', line 117, column 65 to column 149)",
                                                      " (in 'string', line 117, column 6 to column 149)",
                                                      " (in 'string', line 119, column 6 to column 81)",
                                                      " (in 'string', line 122, column 6 to line 134, column 7)",
                                                      " (in 'string', line 125, column 8 to column 88)",
                                                      " (in 'string', line 127, column 68 to column 242)",
                                                      " (in 'string', line 127, column 8 to column 242)",
                                                      " (in 'string', line 130, column 8 to column 143)",
                                                      " (in 'string', line 132, column 8 to column 19)",
                                                      " (in 'string', line 137, column 6 to column 119)",
                                                      " (in 'string', line 140, column 36 to column 188)",
                                                      " (in 'string', line 140, column 6 to column 188)",
                                                      " (in 'string', line 105, column 11 to line 142, column 5)",
                                                      " (in 'string', line 103, column 36 to column 122)",
                                                      " (in 'string', line 103, column 6 to column 122)",
                                                      " (in 'string', line 101, column 32 to line 105, column 5)",
                                                      " (in 'string', line 101, column 4 to line 142, column 5)",
                                                      " (in 'string', line 146, column 6 to column 90)",
                                                      " (in 'string', line 144, column 34 to line 148, column 5)",
                                                      " (in 'string', line 144, column 4 to line 148, column 5)",
                                                      " (in 'string', line 150, column 4 to column 28)",
                                                      " (in 'string', line 49, column 137 to line 152, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
estRodis_stan_scaled_beta_lpdf(const T0__& alpha, const T1__& beta,
                               const T2__& p, const T3__& q, const T4__& x,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ result;
    result = DUMMY_VAR__;
    
    current_statement__ = 23;
    result = 0;
    current_statement__ = 26;
    if ((primitive_value(logical_gte(x, p)) && primitive_value(
        logical_lte(x, q)))) {
      current_statement__ = 24;
      result = ((pow((x - p), (alpha - 1)) * pow((q - x), (beta - 1))) /
                 (((pow((q - p), ((alpha + beta) - 1)) *
                     stan::math::tgamma(alpha)) * stan::math::tgamma(beta)) /
                   stan::math::tgamma((alpha + beta))));
    } 
    current_statement__ = 27;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct estRodis_stan_scaled_beta_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& alpha, const T1__& beta, const T2__& p, const T3__& q,
           const T4__& x, std::ostream* pstream__)  const 
{
return estRodis_stan_scaled_beta_lpdf<propto__>(alpha, beta, p, q, x,
         pstream__);
}
};
template <typename T0__>
int
determine_scaling_factor(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int result;
    result = std::numeric_limits<int>::min();
    
    current_statement__ = 29;
    result = 0;
    current_statement__ = 35;
    if (logical_gte(x, 1000)) {
      current_statement__ = 33;
      result = 1000;
    } else {
      current_statement__ = 31;
      while (logical_lt(result, x)) {
        current_statement__ = 30;
        result = (result + 1);
      }
    }
    current_statement__ = 36;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct determine_scaling_factor_functor__ {
template <typename T0__>
int
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return determine_scaling_factor(x, pstream__);
}
};
template <bool propto__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T2__, T3__, T4__,
T5__>
estRodis_stan_likelihood_log(const std::vector<int>& clusters_size,
                             const std::vector<int>& clusters_freq,
                             const T2__& R, const T3__& k,
                             const T4__& mutation_proba,
                             const T5__& detection_proba,
                             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__, T4__, T5__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n_clusters_size;
    n_clusters_size = std::numeric_limits<int>::min();
    
    current_statement__ = 38;
    n_clusters_size = num_elements(clusters_size);
    int upper_limit_size_identical_sequence_clusters;
    upper_limit_size_identical_sequence_clusters = std::numeric_limits<int>::min();
    
    current_statement__ = 39;
    upper_limit_size_identical_sequence_clusters = std::max(
                                                     (determine_scaling_factor(
                                                        (2 / detection_proba), pstream__)
                                                       * max(clusters_size)),
                                                     (max(clusters_size) +
                                                       500));
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 40;
    index = 2;
    local_scalar_t__ log_R_d_k;
    log_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 41;
    log_R_d_k = stan::math::log(((R * (1 - mutation_proba)) / k));
    local_scalar_t__ log_one_p_R_d_k;
    log_one_p_R_d_k = DUMMY_VAR__;
    
    current_statement__ = 42;
    log_one_p_R_d_k = stan::math::log((1 + ((R * (1 - mutation_proba)) / k)));
    local_scalar_t__ log_detection_proba;
    log_detection_proba = DUMMY_VAR__;
    
    local_scalar_t__ log_1_m_detection_proba;
    log_1_m_detection_proba = DUMMY_VAR__;
    
    local_scalar_t__ log_proba_detect_ident_seq_tree_size_bigger_zero;
    log_proba_detect_ident_seq_tree_size_bigger_zero = DUMMY_VAR__;
    
    current_statement__ = 46;
    validate_non_negative_index("log_sums",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> log_sums;
    log_sums = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 47;
    assign(log_sums, nil_index_list(),
      rep_array(0.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable log_sums");
    current_statement__ = 48;
    validate_non_negative_index("result_temp",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> result_temp;
    result_temp = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 49;
    assign(result_temp, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable result_temp");
    current_statement__ = 50;
    validate_non_negative_index("distribution_size_ident_seq_tree",
                                "upper_limit_size_identical_sequence_clusters",
                                upper_limit_size_identical_sequence_clusters);
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree;
    distribution_size_ident_seq_tree = std::vector<local_scalar_t__>(upper_limit_size_identical_sequence_clusters, DUMMY_VAR__);
    
    current_statement__ = 51;
    assign(distribution_size_ident_seq_tree, nil_index_list(),
      rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
      "assigning variable distribution_size_ident_seq_tree");
    current_statement__ = 52;
    validate_non_negative_index("distribution_size_ident_seq_tree_detection_0",
                                "n_clusters_size + 1", (n_clusters_size + 1));
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree_detection_0;
    distribution_size_ident_seq_tree_detection_0 = std::vector<local_scalar_t__>(
      (n_clusters_size + 1), DUMMY_VAR__);
    
    current_statement__ = 53;
    assign(distribution_size_ident_seq_tree_detection_0, nil_index_list(),
      rep_array(-10000.0, (n_clusters_size + 1)),
      "assigning variable distribution_size_ident_seq_tree_detection_0");
    current_statement__ = 54;
    validate_non_negative_index("distribution_size_ident_seq_tree_detection",
                                "n_clusters_size", n_clusters_size);
    std::vector<local_scalar_t__> distribution_size_ident_seq_tree_detection;
    distribution_size_ident_seq_tree_detection = std::vector<local_scalar_t__>(n_clusters_size, DUMMY_VAR__);
    
    current_statement__ = 55;
    assign(distribution_size_ident_seq_tree_detection, nil_index_list(),
      rep_array(-10000.0, n_clusters_size),
      "assigning variable distribution_size_ident_seq_tree_detection");
    current_statement__ = 56;
    validate_non_negative_index("likelihood", "n_clusters_size",
                                n_clusters_size);
    std::vector<local_scalar_t__> likelihood;
    likelihood = std::vector<local_scalar_t__>(n_clusters_size, DUMMY_VAR__);
    
    current_statement__ = 57;
    assign(likelihood, nil_index_list(),
      rep_array(-10000.0, n_clusters_size), "assigning variable likelihood");
    current_statement__ = 60;
    for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
      current_statement__ = 58;
      assign(distribution_size_ident_seq_tree,
        cons_list(index_uni(ii), nil_index_list()),
        ((((stan::math::lgamma((((k * ii) + ii) - 1)) -
             stan::math::lgamma((k * ii))) - stan::math::lgamma((ii + 1))) +
           ((ii - 1) * log_R_d_k)) -
          ((((k * ii) + ii) - 1) * log_one_p_R_d_k)),
        "assigning variable distribution_size_ident_seq_tree");}
    current_statement__ = 81;
    if (logical_eq(detection_proba, 1.0)) {
      current_statement__ = 79;
      for (int ii = 1; ii <= n_clusters_size; ++ii) {
        current_statement__ = 78;
        assign(distribution_size_ident_seq_tree_detection,
          cons_list(index_uni(ii), nil_index_list()),
          distribution_size_ident_seq_tree[(ii - 1)],
          "assigning variable distribution_size_ident_seq_tree_detection");}
    } else {
      current_statement__ = 61;
      log_detection_proba = stan::math::log(detection_proba);
      current_statement__ = 62;
      log_1_m_detection_proba = stan::math::log((1 - detection_proba));
      current_statement__ = 64;
      for (int ii = 2; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 63;
        assign(log_sums, cons_list(index_uni(ii), nil_index_list()),
          (log_sums[(ii - 1)] +
            (log_sums[((ii - 1) - 1)] + stan::math::log(ii))),
          "assigning variable log_sums");}
      current_statement__ = 66;
      for (int ii = 1; ii <= upper_limit_size_identical_sequence_clusters;
           ++ii) {
        current_statement__ = 65;
        assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
          ((ii * log_1_m_detection_proba) +
            distribution_size_ident_seq_tree[(ii - 1)]),
          "assigning variable result_temp");}
      current_statement__ = 67;
      assign(distribution_size_ident_seq_tree_detection_0,
        cons_list(index_uni(1), nil_index_list()), log_sum_exp(result_temp),
        "assigning variable distribution_size_ident_seq_tree_detection_0");
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= stan::math::size(clusters_size);
           ++sym1__) {
        {
          int jj;
          current_statement__ = 68;
          jj = clusters_size[(sym1__ - 1)];
          current_statement__ = 69;
          assign(result_temp, nil_index_list(),
            rep_array(-10000.0, upper_limit_size_identical_sequence_clusters),
            "assigning variable result_temp");
          current_statement__ = 71;
          for (int ii = jj;
               ii <= upper_limit_size_identical_sequence_clusters; ++ii) {
            current_statement__ = 70;
            assign(result_temp, cons_list(index_uni(ii), nil_index_list()),
              (((((log_sums[(ii - 1)] - log_sums[(jj - 1)]) -
                   log_sums[(std::max((ii - jj), 1) - 1)]) +
                  (jj * log_detection_proba)) +
                 ((ii - jj) * log_1_m_detection_proba)) +
                distribution_size_ident_seq_tree[(ii - 1)]),
              "assigning variable result_temp");}
          current_statement__ = 72;
          assign(distribution_size_ident_seq_tree_detection_0,
            cons_list(index_uni(index), nil_index_list()),
            log_sum_exp(
              tail(result_temp,
                ((upper_limit_size_identical_sequence_clusters - jj) + 1))),
            "assigning variable distribution_size_ident_seq_tree_detection_0");
          current_statement__ = 73;
          index = (index + 1);
        }}
      current_statement__ = 74;
      log_proba_detect_ident_seq_tree_size_bigger_zero = stan::math::log(
                                                           (1 -
                                                             stan::math::exp(
                                                               distribution_size_ident_seq_tree_detection_0[
                                                               (1 - 1)])));
      current_statement__ = 76;
      for (int ii = 1; ii <= n_clusters_size; ++ii) {
        current_statement__ = 75;
        assign(distribution_size_ident_seq_tree_detection,
          cons_list(index_uni(ii), nil_index_list()),
          (distribution_size_ident_seq_tree_detection_0[((ii + 1) - 1)] -
            log_proba_detect_ident_seq_tree_size_bigger_zero),
          "assigning variable distribution_size_ident_seq_tree_detection");}
    }
    current_statement__ = 84;
    for (int ii = 1; ii <= n_clusters_size; ++ii) {
      current_statement__ = 82;
      assign(likelihood, cons_list(index_uni(ii), nil_index_list()),
        (clusters_freq[(ii - 1)] *
          distribution_size_ident_seq_tree_detection[(ii - 1)]),
        "assigning variable likelihood");}
    current_statement__ = 85;
    return sum(likelihood);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct estRodis_stan_likelihood_log_functor__ {
template <bool propto__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T2__, T3__, T4__,
T5__>
operator()(const std::vector<int>& clusters_size,
           const std::vector<int>& clusters_freq, const T2__& R,
           const T3__& k, const T4__& mutation_proba,
           const T5__& detection_proba, std::ostream* pstream__)  const 
{
return estRodis_stan_likelihood_log<propto__>(clusters_size, clusters_freq,
         R, k, mutation_proba, detection_proba, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_estRodis_stan_model_estimate_parameters_1 final : public model_base_crtp<model_estRodis_stan_model_estimate_parameters_1> {
private:
  int M;
  std::vector<int> clusters_size;
  std::vector<int> clusters_freq;
  std::vector<double> prior_r;
  std::vector<double> prior_k;
  double mean_generation_interval;
  std::vector<double> prior_number_yearly_mutations;
  std::vector<double> prior_testing;
  double sequencing_proba;
 
public:
  ~model_estRodis_stan_model_estimate_parameters_1() { }
  
  inline std::string model_name() const final { return "model_estRodis_stan_model_estimate_parameters_1"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  model_estRodis_stan_model_estimate_parameters_1(stan::io::var_context& context__,
                                                  unsigned int random_seed__ = 0,
                                                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_1_namespace::model_estRodis_stan_model_estimate_parameters_1";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 12;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 13;
      validate_non_negative_index("clusters_size", "M", M);
      current_statement__ = 14;
      context__.validate_dims("data initialization","clusters_size","int",
          context__.to_vec(M));
      clusters_size = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 14;
      assign(clusters_size, nil_index_list(),
        context__.vals_i("clusters_size"), "assigning variable clusters_size");
      current_statement__ = 15;
      validate_non_negative_index("clusters_freq", "M", M);
      current_statement__ = 16;
      context__.validate_dims("data initialization","clusters_freq","int",
          context__.to_vec(M));
      clusters_freq = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 16;
      assign(clusters_freq, nil_index_list(),
        context__.vals_i("clusters_freq"), "assigning variable clusters_freq");
      current_statement__ = 17;
      context__.validate_dims("data initialization","prior_r","double",
          context__.to_vec(2));
      prior_r = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(prior_r, nil_index_list(), context__.vals_r("prior_r"),
        "assigning variable prior_r");
      current_statement__ = 18;
      context__.validate_dims("data initialization","prior_k","double",
          context__.to_vec(2));
      prior_k = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(prior_k, nil_index_list(), context__.vals_r("prior_k"),
        "assigning variable prior_k");
      current_statement__ = 19;
      context__.validate_dims("data initialization",
          "mean_generation_interval","double",context__.to_vec());
      mean_generation_interval = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      mean_generation_interval = context__.vals_r("mean_generation_interval")[
          (1 - 1)];
      current_statement__ = 20;
      context__.validate_dims("data initialization",
          "prior_number_yearly_mutations","double",context__.to_vec(2));
      prior_number_yearly_mutations = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(prior_number_yearly_mutations, nil_index_list(),
        context__.vals_r("prior_number_yearly_mutations"),
        "assigning variable prior_number_yearly_mutations");
      current_statement__ = 21;
      context__.validate_dims("data initialization","prior_testing","double",
          context__.to_vec(4));
      prior_testing = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      assign(prior_testing, nil_index_list(),
        context__.vals_r("prior_testing"), "assigning variable prior_testing");
      current_statement__ = 22;
      context__.validate_dims("data initialization","sequencing_proba",
          "double",context__.to_vec());
      sequencing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      sequencing_proba = context__.vals_r("sequencing_proba")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_1_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ R;
      R = DUMMY_VAR__;
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        R = stan::math::lb_constrain(R, 0, lp__);
      } else {
        current_statement__ = 1;
        R = stan::math::lb_constrain(R, 0);
      }
      local_scalar_t__ k;
      k = DUMMY_VAR__;
      
      current_statement__ = 2;
      k = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        k = stan::math::lb_constrain(k, 0, lp__);
      } else {
        current_statement__ = 2;
        k = stan::math::lb_constrain(k, 0);
      }
      local_scalar_t__ number_yearly_mutations;
      number_yearly_mutations = DUMMY_VAR__;
      
      current_statement__ = 3;
      number_yearly_mutations = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        number_yearly_mutations = stan::math::lb_constrain(
                                    number_yearly_mutations, 0, lp__);
      } else {
        current_statement__ = 3;
        number_yearly_mutations = stan::math::lb_constrain(
                                    number_yearly_mutations, 0);
      }
      local_scalar_t__ testing_proba;
      testing_proba = DUMMY_VAR__;
      
      current_statement__ = 4;
      testing_proba = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        testing_proba = stan::math::lub_constrain(testing_proba,
                          prior_testing[(3 - 1)], prior_testing[(4 - 1)],
                          lp__);
      } else {
        current_statement__ = 4;
        testing_proba = stan::math::lub_constrain(testing_proba,
                          prior_testing[(3 - 1)], prior_testing[(4 - 1)]);
      }
      local_scalar_t__ mutation_proba;
      mutation_proba = DUMMY_VAR__;
      
      current_statement__ = 5;
      mutation_proba = (1 -
                         stan::math::exp(
                           ((-number_yearly_mutations / 365.25) *
                             mean_generation_interval)));
      local_scalar_t__ detection_proba;
      detection_proba = DUMMY_VAR__;
      
      current_statement__ = 6;
      detection_proba = (testing_proba * sequencing_proba);
      {
        current_statement__ = 7;
        lp_accum__.add(
          gamma_lpdf<propto__>(R, prior_r[(1 - 1)], prior_r[(2 - 1)]));
        current_statement__ = 8;
        lp_accum__.add(
          gamma_lpdf<propto__>(k, prior_k[(1 - 1)], prior_k[(2 - 1)]));
        current_statement__ = 9;
        lp_accum__.add(
          normal_lpdf<propto__>(number_yearly_mutations,
            prior_number_yearly_mutations[(1 - 1)],
            prior_number_yearly_mutations[(2 - 1)]));
        current_statement__ = 10;
        lp_accum__.add(
          estRodis_stan_scaled_beta_lpdf<propto__>(testing_proba,
            prior_testing[(1 - 1)], prior_testing[(2 - 1)],
            prior_testing[(3 - 1)], prior_testing[(4 - 1)], pstream__));
        current_statement__ = 11;
        lp_accum__.add(
          estRodis_stan_likelihood_log<false>(clusters_size, clusters_freq,
            R, k, mutation_proba, detection_proba, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_estRodis_stan_model_estimate_parameters_1_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = in__.scalar();
      current_statement__ = 1;
      R = stan::math::lb_constrain(R, 0);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k = in__.scalar();
      current_statement__ = 2;
      k = stan::math::lb_constrain(k, 0);
      double number_yearly_mutations;
      number_yearly_mutations = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations = in__.scalar();
      current_statement__ = 3;
      number_yearly_mutations = stan::math::lb_constrain(
                                  number_yearly_mutations, 0);
      double testing_proba;
      testing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba = in__.scalar();
      current_statement__ = 4;
      testing_proba = stan::math::lub_constrain(testing_proba,
                        prior_testing[(3 - 1)], prior_testing[(4 - 1)]);
      double mutation_proba;
      mutation_proba = std::numeric_limits<double>::quiet_NaN();
      
      double detection_proba;
      detection_proba = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(R);
      vars__.emplace_back(k);
      vars__.emplace_back(number_yearly_mutations);
      vars__.emplace_back(testing_proba);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 5;
      mutation_proba = (1 -
                         stan::math::exp(
                           ((-number_yearly_mutations / 365.25) *
                             mean_generation_interval)));
      current_statement__ = 6;
      detection_proba = (testing_proba * sequencing_proba);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(mutation_proba);
        vars__.emplace_back(detection_proba);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double R;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R = context__.vals_r("R")[(1 - 1)];
      double R_free__;
      R_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      R_free__ = stan::math::lb_free(R, 0);
      double k;
      k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k = context__.vals_r("k")[(1 - 1)];
      double k_free__;
      k_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      k_free__ = stan::math::lb_free(k, 0);
      double number_yearly_mutations;
      number_yearly_mutations = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations = context__.vals_r("number_yearly_mutations")[
          (1 - 1)];
      double number_yearly_mutations_free__;
      number_yearly_mutations_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      number_yearly_mutations_free__ = stan::math::lb_free(
                                         number_yearly_mutations, 0);
      double testing_proba;
      testing_proba = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba = context__.vals_r("testing_proba")[(1 - 1)];
      double testing_proba_free__;
      testing_proba_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      testing_proba_free__ = stan::math::lub_free(testing_proba,
                               prior_testing[(3 - 1)], prior_testing[
                               (4 - 1)]);
      vars__.emplace_back(R_free__);
      vars__.emplace_back(k_free__);
      vars__.emplace_back(number_yearly_mutations_free__);
      vars__.emplace_back(testing_proba_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("R");
    names__.emplace_back("k");
    names__.emplace_back("number_yearly_mutations");
    names__.emplace_back("testing_proba");
    names__.emplace_back("mutation_proba");
    names__.emplace_back("detection_proba");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "number_yearly_mutations");
    param_names__.emplace_back(std::string() + "testing_proba");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mutation_proba");
      param_names__.emplace_back(std::string() + "detection_proba");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "R");
    param_names__.emplace_back(std::string() + "k");
    param_names__.emplace_back(std::string() + "number_yearly_mutations");
    param_names__.emplace_back(std::string() + "testing_proba");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mutation_proba");
      param_names__.emplace_back(std::string() + "detection_proba");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"number_yearly_mutations\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"testing_proba\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mutation_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"detection_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"number_yearly_mutations\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"testing_proba\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mutation_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"detection_proba\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_estRodis_stan_model_estimate_parameters_1_namespace::model_estRodis_stan_model_estimate_parameters_1;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_estRodis_stan_model_estimate_parameters_1_namespace::profiles__;
}
#endif
#endif
