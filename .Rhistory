nrow(edges)
estRodis_plot_transmission_chain_mutation(nodes, edges, 1)
devtools::load_all(".")
nodes
estRodis_plot_transmission_chain_mutation(nodes, edges, 1,)
estRodis_plot_transmission_chain_mutation(nodes, edges, 1, "flexible")
devtools::load_all(".")
estRodis_plot_transmission_chain_mutation(nodes, edges, 1,)
estRodis_plot_transmission_chain_mutation(nodes, edges, 1, "flexible")
estRodis_plot_transmission_chain_mutation(nodes, edges, 2, "flexible")
estRodis_plot_transmission_chain_mutation(nodes, edges, 3, "flexible")
estRodis_plot_transmission_chain_mutation(nodes, edges, 4, "flexible")
devtools::load_all(".")
devtools::load_all(".")
nodes <- transmission_chain$nodes
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
transmission_chain <- estRodis_simulate_transmission_chain()
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
nrow(edges)
max_generation <- 4
style_plot <- "fixed"
style_legend_clusters <- "fixed"
# define color scale for complete transmission chain (determined by nodes and edges)
colours_whole_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes |> dplyr::pull("current_variant"))))
colours_whole_transmission_chain
# the complete transmission chain (determined by nodes and edges) will be added to the plot,
# but only nodes and edges up to generation max_generation will be visible
if (style_plot == "fixed") {
nodes_plot <- nodes
edges_plot <- edges
# only nodes and edges up to generation max_generation will be added to the plot
} else {
nodes_plot <- nodes |> dplyr::filter(generation <= max_generation)
edges_plot <- edges |> dplyr::filter(generation <= max_generation)
}
# colors of all clusters of the complete transmission chain (determined by nodes and edges) will be added to the legend
if (style_legend_clusters == "fixed") {
colours_transmission_chain <- colours_whole_transmission_chain[1:length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant")))]
# only colors of the clusters present in nodes and edges up to generation max_generation will be added to the legend
} else {
colours_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))
}
colours_transmission_chain
colours_whole_transmission_chain
# define color scale for edges of transmission chain that will be visible on the plot (nodes and edges up to generation max_generation)
colours_transmission_chain_edges <- colours_transmission_chain[unique(match(x = edges_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("variant_transmitted"),
table = unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))]
colours_transmission_chain_edges
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = nodes_plot,
edges = edges_plot,
directed = TRUE)
if (nrow(edges_plot) >= 1) {
# add x and y coordinate of nodes in column "from"
edges_plot <- edges_plot |> dplyr::mutate(node_key = from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
edges_plot <- edges_plot |> dplyr::mutate(node_key = to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# add column "edge.id"
edges_plot <- edges_plot |> dplyr::mutate(edge.id = 1:nrow(edges_plot))
# add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
edges_plot <- edges_plot |> dplyr::mutate(in_same_cluster = as.numeric(from_variant == to_variant))
}
unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation), -1))
odes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)
nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)
c(colours_transmission_chain, "white")
c(colours_whole_transmission_chain, "white")
plot_graph_mutation <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges_plot) >= 1)
ggraph::geom_edge_link(data = edges_plot,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor(.data$variant_transmitted * (.data$generation <= max_generation) - (.data$generation > max_generation)),
edge_linetype = factor(.data$in_same_cluster),
edge_width = factor(.data$in_same_cluster)))} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1)),
limits = factor(unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1))),
values = c(colours_transmission_chain_edges, "white"),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_width_manual(name = "Transmission",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c(1, 0.5),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_linetype_manual(name = "Transmission:",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c("solid", "dashed"),
labels = c("Within same cluster", "Not within same cluster"))}
plot_graph_mutation
style_plot
style_plot <- ""
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
# define color scale for complete transmission chain (determined by nodes and edges)
colours_whole_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes |> dplyr::pull("current_variant"))))
# the complete transmission chain (determined by nodes and edges) will be added to the plot,
# but only nodes and edges up to generation max_generation will be visible
if (style_plot == "fixed") {
nodes_plot <- nodes
edges_plot <- edges
# only nodes and edges up to generation max_generation will be added to the plot
} else {
nodes_plot <- nodes |> dplyr::filter(generation <= max_generation)
edges_plot <- edges |> dplyr::filter(generation <= max_generation)
}
# colors of all clusters of the complete transmission chain (determined by nodes and edges) will be added to the legend
if (style_legend_clusters == "fixed") {
colours_transmission_chain <- colours_whole_transmission_chain[1:length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant")))]
# only colors of the clusters present in nodes and edges up to generation max_generation will be added to the legend
} else {
colours_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))
}
# define color scale for edges of transmission chain that will be visible on the plot (nodes and edges up to generation max_generation)
colours_transmission_chain_edges <- colours_transmission_chain[unique(match(x = edges_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("variant_transmitted"),
table = unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))]
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = nodes_plot,
edges = edges_plot,
directed = TRUE)
if (nrow(edges_plot) >= 1) {
# add x and y coordinate of nodes in column "from"
edges_plot <- edges_plot |> dplyr::mutate(node_key = from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
edges_plot <- edges_plot |> dplyr::mutate(node_key = to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# add column "edge.id"
edges_plot <- edges_plot |> dplyr::mutate(edge.id = 1:nrow(edges_plot))
# add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
edges_plot <- edges_plot |> dplyr::mutate(in_same_cluster = as.numeric(from_variant == to_variant))
}
scale_edge_color_manual_breaks <- a
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
# define color scale for complete transmission chain (determined by nodes and edges)
colours_whole_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes |> dplyr::pull("current_variant"))))
# the complete transmission chain (determined by nodes and edges) will be added to the plot,
# but only nodes and edges up to generation max_generation will be visible
if (style_plot == "fixed") {
nodes_plot <- nodes
edges_plot <- edges
# only nodes and edges up to generation max_generation will be added to the plot
} else {
nodes_plot <- nodes |> dplyr::filter(generation <= max_generation)
edges_plot <- edges |> dplyr::filter(generation <= max_generation)
}
# colors of all clusters of the complete transmission chain (determined by nodes and edges) will be added to the legend
if (style_legend_clusters == "fixed") {
colours_transmission_chain <- colours_whole_transmission_chain[1:length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant")))]
# only colors of the clusters present in nodes and edges up to generation max_generation will be added to the legend
} else {
colours_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))
}
# define color scale for edges of transmission chain that will be visible on the plot (nodes and edges up to generation max_generation)
colours_transmission_chain_edges <- colours_transmission_chain[unique(match(x = edges_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("variant_transmitted"),
table = unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))]
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = nodes_plot,
edges = edges_plot,
directed = TRUE)
if (nrow(edges_plot) >= 1) {
# add x and y coordinate of nodes in column "from"
edges_plot <- edges_plot |> dplyr::mutate(node_key = from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
edges_plot <- edges_plot |> dplyr::mutate(node_key = to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# add column "edge.id"
edges_plot <- edges_plot |> dplyr::mutate(edge.id = 1:nrow(edges_plot))
# add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
edges_plot <- edges_plot |> dplyr::mutate(in_same_cluster = as.numeric(from_variant == to_variant))
}
scale_edge_color_manual_breaks <- 1
scale_edge_color_manual_limits <- 1
scale_edge_color_manual_values <- 1
scale_color_manual_breaks <- 1
scale_color_manual_limits <- 1
scale_color_manual_values <- 1
scale_color_manual_labels <- 1
# create plot
plot_graph_mutation <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges_plot) >= 1)
ggraph::geom_edge_link(data = edges_plot,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor(.data$variant_transmitted * (.data$generation <= max_generation) - (.data$generation > max_generation)),
edge_linetype = factor(.data$in_same_cluster),
edge_width = factor(.data$in_same_cluster)))} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1)),
limits = factor(unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1))),
values = c(colours_transmission_chain_edges, "white"),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_width_manual(name = "Transmission",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c(1, 0.5),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_linetype_manual(name = "Transmission:",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c("solid", "dashed"),
labels = c("Within same cluster", "Not within same cluster"))}
plot_graph_mutation
colours_transmission_chain_edges
plot_graph_mutation <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges_plot) >= 1)
ggraph::geom_edge_link(data = edges_plot,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor(.data$variant_transmitted * (.data$generation <= max_generation) - (.data$generation > max_generation)),
edge_linetype = factor(.data$in_same_cluster),
edge_width = factor(.data$in_same_cluster)))} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1)),
limits = factor(unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1))),
values = c(colours_transmission_chain_edges, "white"),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_width_manual(name = "Transmission",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c(1, 0.5),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_linetype_manual(name = "Transmission:",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c("solid", "dashed"),
labels = c("Within same cluster", "Not within same cluster"))} +
ggraph::geom_node_point(data = create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor(.data$current_variant * (.data$generation <=  max_generation) - (.data$generation > max_generation)),
fill = factor(.data$current_variant * (.data$generation <= max_generation) - (.data$generation > max_generation)),
shape = factor(.data$mutation_occurred),
size = factor(.data$mutation_occurred))) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = scale_color_manual_breaks,
limits = factor(scale_color_manual_breaks),
values = scale_color_manual_values,
labels = scale_color_manual_labels)
plot_graph_mutation
style_plot <- "fixed"
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
# define color scale for complete transmission chain (determined by nodes and edges)
colours_whole_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes |> dplyr::pull("current_variant"))))
# the complete transmission chain (determined by nodes and edges) will be added to the plot,
# but only nodes and edges up to generation max_generation will be visible
if (style_plot == "fixed") {
nodes_plot <- nodes
edges_plot <- edges
# only nodes and edges up to generation max_generation will be added to the plot
} else {
nodes_plot <- nodes |> dplyr::filter(generation <= max_generation)
edges_plot <- edges |> dplyr::filter(generation <= max_generation)
}
# colors of all clusters of the complete transmission chain (determined by nodes and edges) will be added to the legend
if (style_legend_clusters == "fixed") {
colours_transmission_chain <- colours_whole_transmission_chain[1:length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant")))]
# only colors of the clusters present in nodes and edges up to generation max_generation will be added to the legend
} else {
colours_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))
}
# define color scale for edges of transmission chain that will be visible on the plot (nodes and edges up to generation max_generation)
colours_transmission_chain_edges <- colours_transmission_chain[unique(match(x = edges_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("variant_transmitted"),
table = unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))]
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = nodes_plot,
edges = edges_plot,
directed = TRUE)
if (nrow(edges_plot) >= 1) {
# add x and y coordinate of nodes in column "from"
edges_plot <- edges_plot |> dplyr::mutate(node_key = from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
edges_plot <- edges_plot |> dplyr::mutate(node_key = to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# add column "edge.id"
edges_plot <- edges_plot |> dplyr::mutate(edge.id = 1:nrow(edges_plot))
# add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
edges_plot <- edges_plot |> dplyr::mutate(in_same_cluster = as.numeric(from_variant == to_variant))
}
if (style_plot == "fixed" & style_legend_clusters == "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation), -1))
scale_color_manual_values <- c(colours_whole_transmission_chain, "white")
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_whole_transmission_chain))], "")
}
if (style_plot == "fixed" & style_legend_clusters != "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation), -1))
scale_color_manual_values <- c(colours_transmission_chain, "white")
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_transmission_chain))], "")
}
if (style_plot != "fixed" & style_legend_clusters == "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)))
scale_color_manual_values <- c(colours_whole_transmission_chain)
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_whole_transmission_chain))])
}
if (style_plot != "fixed" & style_legend_clusters != "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)))
scale_color_manual_values <- c(colours_transmission_chain)
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_transmission_chain))])
}
scale_fill_manual_breaks <- 1
scale_fill_manual_limits <- 1
scale_fill_manual_values <- 1
scale_fill_manual_labels <- 1
# create plot
plot_graph_mutation <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges_plot) >= 1)
ggraph::geom_edge_link(data = edges_plot,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor(.data$variant_transmitted * (.data$generation <= max_generation) - (.data$generation > max_generation)),
edge_linetype = factor(.data$in_same_cluster),
edge_width = factor(.data$in_same_cluster)))} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1)),
limits = factor(unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1))),
values = c(colours_transmission_chain_edges, "white"),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_width_manual(name = "Transmission",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c(1, 0.5),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_linetype_manual(name = "Transmission:",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c("solid", "dashed"),
labels = c("Within same cluster", "Not within same cluster"))} +
ggraph::geom_node_point(data = create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor(.data$current_variant * (.data$generation <=  max_generation) - (.data$generation > max_generation)),
fill = factor(.data$current_variant * (.data$generation <= max_generation) - (.data$generation > max_generation)),
shape = factor(.data$mutation_occurred),
size = factor(.data$mutation_occurred))) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = scale_color_manual_breaks,
limits = factor(scale_color_manual_breaks),
values = scale_color_manual_values,
labels = scale_color_manual_labels)
style_plot
style_legend_clusters
scale_color_manual_breaks
scale_color_manual_labels
nodes <- transmission_chain$nodes
edges <- transmission_chain$edges
# define color scale for complete transmission chain (determined by nodes and edges)
colours_whole_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes |> dplyr::pull("current_variant"))))
# the complete transmission chain (determined by nodes and edges) will be added to the plot,
# but only nodes and edges up to generation max_generation will be visible
if (style_plot == "fixed") {
nodes_plot <- nodes
edges_plot <- edges
# only nodes and edges up to generation max_generation will be added to the plot
} else {
nodes_plot <- nodes |> dplyr::filter(generation <= max_generation)
edges_plot <- edges |> dplyr::filter(generation <= max_generation)
}
# colors of all clusters of the complete transmission chain (determined by nodes and edges) will be added to the legend
if (style_legend_clusters == "fixed") {
colours_transmission_chain <- colours_whole_transmission_chain[1:length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant")))]
# only colors of the clusters present in nodes and edges up to generation max_generation will be added to the legend
} else {
colours_transmission_chain <- paletteer::paletteer_c("viridis::plasma", n = length(unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))
}
# define color scale for edges of transmission chain that will be visible on the plot (nodes and edges up to generation max_generation)
colours_transmission_chain_edges <- colours_transmission_chain[unique(match(x = edges_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("variant_transmitted"),
table = unique(nodes_plot |> dplyr::filter(generation <= max_generation) |> dplyr::pull("current_variant"))))]
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = nodes_plot,
edges = edges_plot,
directed = TRUE)
if (nrow(edges_plot) >= 1) {
# add x and y coordinate of nodes in column "from"
edges_plot <- edges_plot |> dplyr::mutate(node_key = from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
edges_plot <- edges_plot |> dplyr::mutate(node_key = to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# add column "edge.id"
edges_plot <- edges_plot |> dplyr::mutate(edge.id = 1:nrow(edges_plot))
# add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
edges_plot <- edges_plot |> dplyr::mutate(in_same_cluster = as.numeric(from_variant == to_variant))
}
if (style_plot == "fixed" & style_legend_clusters == "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation), -1))
scale_color_manual_values <- c(colours_whole_transmission_chain, "white")
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = (length(scale_color_manual_breaks)-1))], "")
}
if (style_plot == "fixed" & style_legend_clusters != "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation), -1))
scale_color_manual_values <- c(colours_transmission_chain, "white")
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_transmission_chain))], "")
}
if (style_plot != "fixed" & style_legend_clusters == "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)))
scale_color_manual_values <- c(colours_whole_transmission_chain)
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_whole_transmission_chain))])
}
if (style_plot != "fixed" & style_legend_clusters != "fixed") {
scale_color_manual_breaks <- unique(c(nodes_plot$current_variant * (nodes_plot$generation <=  max_generation) - (nodes_plot$generation > max_generation)))
scale_color_manual_values <- c(colours_transmission_chain)
scale_color_manual_labels <- c(LETTERS[seq(from = 1, to = length(colours_transmission_chain))])
}
scale_fill_manual_breaks <- 1
scale_fill_manual_limits <- 1
scale_fill_manual_values <- 1
scale_fill_manual_labels <- 1
# create plot
plot_graph_mutation <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges_plot) >= 1)
ggraph::geom_edge_link(data = edges_plot,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor(.data$variant_transmitted * (.data$generation <= max_generation) - (.data$generation > max_generation)),
edge_linetype = factor(.data$in_same_cluster),
edge_width = factor(.data$in_same_cluster)))} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1)),
limits = factor(unique(c(edges_plot$variant_transmitted * (edges_plot$generation <= max_generation) - (edges_plot$generation > max_generation), -1))),
values = c(colours_transmission_chain_edges, "white"),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_width_manual(name = "Transmission",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c(1, 0.5),
guide = "none")} +
{if (nrow(edges_plot) >= 1)
ggraph::scale_edge_linetype_manual(name = "Transmission:",
breaks = c(1, 0),
limits = factor(c(1, 0)),
values = c("solid", "dashed"),
labels = c("Within same cluster", "Not within same cluster"))} +
ggraph::geom_node_point(data = create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor(.data$current_variant * (.data$generation <=  max_generation) - (.data$generation > max_generation)),
fill = factor(.data$current_variant * (.data$generation <= max_generation) - (.data$generation > max_generation)),
shape = factor(.data$mutation_occurred),
size = factor(.data$mutation_occurred))) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = scale_color_manual_breaks,
limits = factor(scale_color_manual_breaks),
values = scale_color_manual_values,
labels = scale_color_manual_labels)
plot_graph_mutation
