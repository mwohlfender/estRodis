return(output)
}
style_plot <- "fixed"
style_legend_clusters <- "fixed"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "fixed"
style_legend_clusters <- "flexible"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "fixed"
style_legend_clusters <- "fixed"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "fixed"
style_legend_clusters <- "flexible"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "flexible"
style_legend_clusters <- "fixed"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "flexible"
style_legend_clusters <- "flexible"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
style_plot <- "flexible"
style_legend_clusters <- "fixed"
test_plot <- estRodis_plot_transmission_chain_mutation(nodes, edges, max_generation, style_plot, style_legend_clusters)
test_plot
devtools::load_all(".")
devtools::load_all(".")
?estRodis_plot_transmission_chain_mutation
devtools::load_all(".")
?estRodis_plot_transmission_chain_mutation
transmission_chain <- estRodis_simulate_transmission_chain()
transmission_chain_nodes <- transmission_chain$nodes
transmission_chain_edges <- transmission_chain$edges
plot_transmission_chain <- estRodis_plot_transmission_chain_mutation(
transmission_chain_nodes = transmission_chain_nodes,
transmission_chain_edges = transmission_chain_edges,
max_generation = min(max(nodes$generation), 5)
plot_transmission_chain <- estRodis_plot_transmission_chain_mutation(transmission_chain_nodes = transmission_chain_nodes,transmission_chain_edges = transmission_chain_edges,max_generation = min(max(nodes$generation), 5)
plot_transmission_chain <- estRodis_plot_transmission_chain_mutation(transmission_chain_nodes = transmission_chain_nodes,transmission_chain_edges = transmission_chain_edges,max_generation = min(max(nodes$generation), 5))
devtools::load_all(".")
transmission_chain <- estRodis_simulate_transmission_chain()
transmission_chain
transmission_chain_nodes <- transmission_chain$nodes
transmission_chain_edges <- transmission_chain$edges
estRodis_plot_transmission_chain_mutation(
transmission_chain_nodes = transmission_chain_nodes,
transmission_chain_edges = transmission_chain_edges,
max_generation = min(max(transmission_chain_nodes$generation), 5))
plot_nodes
transmission_chain <- estRodis_simulate_transmission_chain()
devtools::load_all(".")
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain <- estRodis_simulate_transmission_chain()
print(nrow(transmission_chain$edges))
transmission_chain_nodes <- transmission_chain$nodes
transmission_chain_edges <- transmission_chain$edges
style_plot <- "fixed"
style_legend_clusters <- "fixed"
max_generation <- 5
# determine nodes and edges that will be added to the plot
if (style_plot == "fixed") {
# the whole transmission chain (determined by `transmission_chain_nodes` and `transmission_chain_edges`) will be added to the plot,
# but only nodes and edges up to generation `max_generation` will be visible
plot_nodes <- transmission_chain_nodes
plot_edges <- transmission_chain_edges
} else {
# only nodes and edges up to generation `max_generation` will be added to the plot
plot_nodes <- transmission_chain_nodes |> dplyr::filter(transmission_chain_nodes$generation <= max_generation)
plot_edges <- transmission_chain_edges |> dplyr::filter(transmission_chain_edges$generation <= max_generation)
}
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = plot_nodes,
edges = plot_edges,
directed = TRUE)
# create plot
plot_graph_mutation_detection <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(edges) >= 1) ggraph::geom_edge_link(data = edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
# create plot
plot_graph <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(plot_edges) >= 1) ggraph::geom_edge_link(data = plot_edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(plot_edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
colour_nodes_edges <- "blue"
# create plot
plot_graph <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(plot_edges) >= 1) ggraph::geom_edge_link(data = plot_edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(plot_edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
plot_graph
# determine nodes and edges that will be added to the plot
if (style_plot == "fixed") {
# the whole transmission chain (determined by `transmission_chain_nodes` and `transmission_chain_edges`) will be added to the plot,
# but only nodes and edges up to generation `max_generation` will be visible
plot_nodes <- transmission_chain_nodes
plot_edges <- transmission_chain_edges
} else {
# only nodes and edges up to generation `max_generation` will be added to the plot
plot_nodes <- transmission_chain_nodes |> dplyr::filter(transmission_chain_nodes$generation <= max_generation)
plot_edges <- transmission_chain_edges |> dplyr::filter(transmission_chain_edges$generation <= max_generation)
}
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = plot_nodes,
edges = plot_edges,
directed = TRUE)
if (nrow(plot_edges) >= 1) {
# add column "edge.id"
plot_edges <- plot_edges |> dplyr::mutate(edge.id = 1:nrow(plot_edges))
# add x and y coordinate of nodes in column "from"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# # add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
# plot_edges <- plot_edges |> dplyr::mutate(in_same_cluster = as.numeric(plot_edges$from_variant == plot_edges$to_variant))
}
# create plot
plot_graph <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(plot_edges) >= 1) ggraph::geom_edge_link(data = plot_edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(plot_edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
plot_graph
style_plot <- "fixed"
# determine nodes and edges that will be added to the plot
if (style_plot == "fixed") {
# the whole transmission chain (determined by `transmission_chain_nodes` and `transmission_chain_edges`) will be added to the plot,
# but only nodes and edges up to generation `max_generation` will be visible
plot_nodes <- transmission_chain_nodes
plot_edges <- transmission_chain_edges
} else {
# only nodes and edges up to generation `max_generation` will be added to the plot
plot_nodes <- transmission_chain_nodes |> dplyr::filter(transmission_chain_nodes$generation <= max_generation)
plot_edges <- transmission_chain_edges |> dplyr::filter(transmission_chain_edges$generation <= max_generation)
}
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = plot_nodes,
edges = plot_edges,
directed = TRUE)
if (nrow(plot_edges) >= 1) {
# add column "edge.id"
plot_edges <- plot_edges |> dplyr::mutate(edge.id = 1:nrow(plot_edges))
# add x and y coordinate of nodes in column "from"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# # add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
# plot_edges <- plot_edges |> dplyr::mutate(in_same_cluster = as.numeric(plot_edges$from_variant == plot_edges$to_variant))
}
# create plot
plot_graph <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(plot_edges) >= 1) ggraph::geom_edge_link(data = plot_edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(plot_edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
plot_graph
style_plot <- "flexible"
# determine nodes and edges that will be added to the plot
if (style_plot == "fixed") {
# the whole transmission chain (determined by `transmission_chain_nodes` and `transmission_chain_edges`) will be added to the plot,
# but only nodes and edges up to generation `max_generation` will be visible
plot_nodes <- transmission_chain_nodes
plot_edges <- transmission_chain_edges
} else {
# only nodes and edges up to generation `max_generation` will be added to the plot
plot_nodes <- transmission_chain_nodes |> dplyr::filter(transmission_chain_nodes$generation <= max_generation)
plot_edges <- transmission_chain_edges |> dplyr::filter(transmission_chain_edges$generation <= max_generation)
}
# define graph
graph_transmission_chain <- tidygraph::tbl_graph(nodes = plot_nodes,
edges = plot_edges,
directed = TRUE)
if (nrow(plot_edges) >= 1) {
# add column "edge.id"
plot_edges <- plot_edges |> dplyr::mutate(edge.id = 1:nrow(plot_edges))
# add x and y coordinate of nodes in column "from"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$from) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_from" = "x", "y_from" = "y") |> dplyr::select(-"node_key")
# add x and y coordinate of nodes in column "to"
plot_edges <- plot_edges |> dplyr::mutate(node_key = plot_edges$to) |> dplyr::left_join(create_layout(graph_transmission_chain, layout = "tree")  |> dplyr::select(c("node_key", "x", "y")),
by = "node_key") |> dplyr::rename("x_to" = "x", "y_to" = "y") |> dplyr::select(-"node_key")
# # add column "in_same_cluster": 1 if both nodes of an edge belong to the same identical sequence cluster, 0 if not
# plot_edges <- plot_edges |> dplyr::mutate(in_same_cluster = as.numeric(plot_edges$from_variant == plot_edges$to_variant))
}
# create plot
plot_graph <- ggraph::ggraph(graph = graph_transmission_chain, layout = "tree") +
{if (nrow(plot_edges) >= 1) ggraph::geom_edge_link(data = plot_edges,
mapping = ggplot2::aes(x = .data$x_from,
y = .data$y_from,
xend = .data$x_to,
yend = .data$y_to,
edge_colour = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
edge_linetype = "solid",
edge_width = 1)} +
{if (nrow(plot_edges) >= 1) ggraph::scale_edge_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none")} +
ggraph::geom_node_point(data = ggraph::create_layout(graph_transmission_chain, layout = "tree"),
mapping = ggplot2::aes(x = .data$x,
y = .data$y,
color = factor((.data$generation <= max_generation) - (.data$generation > max_generation)),
fill = factor((.data$generation <= max_generation) - (.data$generation > max_generation))),
shape = 21,
size = 2.5) +
ggplot2::scale_color_manual(name = "Identical sequence cluster:",
breaks = c(1, -1),
limits = factor(c(1, -1)),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::scale_fill_manual(name = "Cluster",
breaks = c(1, -1),
values = c(colour_nodes_edges, "white"),
guide = "none") +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = "white", colour = "black"))
plot_graph
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?estRodis_plot_transmission_chain
?read_csv
devtools::load_all(".")
devtools::load_all(".")
estRodis_init_params_model_one()
estRodis_init_params_model_one()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
estRodis_init_params_model_two()
estRodis_init_params_model_two()
estRodis_init_params_model_one()
estRodis_init_params_model_one()
devtools::load_all(".")
devtools::load_all(".")
estRodis_simulate_cluster_sizes(10, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
devtools::load_all(".")
estRodis_simulate_cluster_sizes(10, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
devtools::load_all(".")
estRodis_simulate_cluster_sizes(10, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
4 * 3000 / 60
stats::rnbinom(n = 0, size = 0.5, mu = 1.3)
stats::rnbinom(n = 1, size = 0.5, mu = 1.3)
stats::rnbinom(n = 1, size = 0.5, mu = 1.3)
?stats::rnbinom
stats::pnbinom(size = 0.5, mu = 1.3)
stats::pnbinom(q = 0, size = 0.5, mu = 1.3)
stats::pnbinom(q = 0, size = 0.5, mu = 1.3)
stats::pnbinom(q = 0, size = 0.5, mu = 1.3)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
devtools::load_all(".")
devtools::load_all(".")
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
devtools::load_all(".")
devtools::load_all(".")
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
t0 <- Sys.time()
estRodis_simulate_cluster_sizes(1, 2500, 1.3, 0.5, 14, 5.2, 0.1, 0.01)
t1 <- Sys.time()
print(t1-t0)
20 * 3000 / 3600
devtools::load_all(".")
devtools::load_all(".")
library(estRodis)
library(estRodis)
devtools::load_all(".")
devtools::load_all(".")
simulated_clusters <- estRodis_simulate_cluster_sizes(n_clusters = 3000,
max_cluster_size = 2500,
R = 2.0,
k = 0.3,
yearly_mutation_rate = 14,
mean_generation_interval = 5.2,
testing_proba = 0.8,
sequencing_proba = 1)
options(mc.cores = parallelly::availableCores())
simulated_clusters
estRodis_estimate_parameters_test(simulated_clusters$size, simulated_clusters$frequency)
simulated_clusters
options(mc.cores = parallelly::availableCores())
estRodis_estimate_parameters_test(simulated_clusters$size, simulated_clusters$frequency, sample_file="C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_and_k_final/R_k_final/R/test/stan_model_test_sample")
library(estRodis)
estRodis_stan_likelihood_log_smart(1,1,200,2.5,0.3,0.18,0.5,0.001)
devtools::load_all(".")
estRodis_stan_likelihood_log_smart(1,1,200,2.5,0.3,0.18,0.5,0.001)
estRodis_estimate_parameters_test(1,1)
clusters <- estRodis_simulate_cluster_sizes(3000, 2500, 2.5, 0.3, 14, 5.2, 0.8, 1)
options(mc.cores = parallelly::availableCores())
estRodis_estimate_parameters_test(clusters$size, clusters$frequency)
