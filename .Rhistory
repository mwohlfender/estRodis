n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
print(n_nodes_detected)
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency = rep(x = 0, times = max_cluster_size + 1))
devtools::load_all(".")
#' @importFrom dplyr filter
#' @importFrom dplyr mutate
#' @importFrom dplyr pull
#' @importFrom stats rbinom
#' @importFrom stats rnbinom
esRd_simulate_cluster_sizes_new_a <- function(n_clusters = 1000,
max_cluster_size = 2500,
R = 1.0,
k = 0.3,
yearly_mutation_rate = 14,
mean_generation_interval = 5.2,
testing_proba = 0.6,
sequencing_proba = 0.4) {
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency = rep(x = 0, times = max_cluster_size + 1))
# simulate transmission trees and store the sizes of the identical sequence clusters they contain
# until at least n_clusters identical sequence clusters have been created
# convention: the size of an identical sequence cluster is the number of nodes that have transmitted the respective variant to their (direct) offspring (might have zero offspring)
while (sum(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1) |> dplyr::pull(frequency())) < n_clusters) {
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
# store the size of the identical sequence cluster
n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] <- n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] + 1
}
return(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(frequency != 0))
}
esRd_simulate_cluster_sizes_new_a()
n_nodes_identical_sequence_clusters_sim
n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1)
n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1) |> dplyr::pull(frequency())
n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1) |> dplyr::pull(frequency)
devtools::load_all(".")
esRd_simulate_cluster_sizes_new_a()
#' @importFrom dplyr filter
#' @importFrom dplyr mutate
#' @importFrom dplyr pull
#' @importFrom stats rbinom
#' @importFrom stats rnbinom
esRd_simulate_cluster_sizes_new_a <- function(n_clusters = 1000,
max_cluster_size = 2500,
R = 1.0,
k = 0.3,
yearly_mutation_rate = 14,
mean_generation_interval = 5.2,
testing_proba = 0.6,
sequencing_proba = 0.4) {
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency = rep(x = 0, times = max_cluster_size + 1))
# simulate transmission trees and store the sizes of the identical sequence clusters they contain
# until at least n_clusters identical sequence clusters have been created
# convention: the size of an identical sequence cluster is the number of nodes that have transmitted the respective variant to their (direct) offspring (might have zero offspring)
while (sum(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1) |> dplyr::pull(frequency)) < n_clusters) {
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
# store the size of the identical sequence cluster
n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] <- n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] + 1
}
return(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(frequency != 0))
}
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
esRd_simulate_cluster_sizes_new_a()
esRd_simulate_cluster_sizes_new_a()
esRd_simulate_cluster_sizes_new_a()
#' @importFrom dplyr filter
#' @importFrom dplyr mutate
#' @importFrom dplyr pull
#' @importFrom stats rbinom
#' @importFrom stats rnbinom
esRd_simulate_cluster_sizes_new_a <- function(n_clusters = 1000,
max_cluster_size = 2500,
R = 1.0,
k = 0.3,
yearly_mutation_rate = 14,
mean_generation_interval = 5.2,
testing_proba = 0.6,
sequencing_proba = 0.4) {
mutation_proba <- 1 - exp(- yearly_mutation_rate / 365.25 * mean_generation_interval)
detection_proba <- testing_proba * sequencing_proba
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency = rep(x = 0, times = max_cluster_size + 1))
# simulate transmission trees and store the sizes of the identical sequence clusters they contain
# until at least n_clusters identical sequence clusters have been created
# convention: the size of an identical sequence cluster is the number of nodes that have transmitted the respective variant to their (direct) offspring (might have zero offspring)
while (sum(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(size >= 1) |> dplyr::pull(frequency)) < n_clusters) {
n_free_leaves <- 1
n_nodes_detected <- stats::rbinom(n = 1, size = 1, prob = detection_proba)
while ((n_free_leaves > 0) && (n_nodes_detected <= max_cluster_size)) {
n_new_leaves_tree <- stats::rnbinom(n = 1, size = k, mu = R)
n_new_leaves_cluster <- sum(stats::rbinom(n = n_new_leaves_tree, size = 1, prob = mutation_proba))
n_nodes_detected <- n_nodes_detected + sum(stats::rbinom(n = n_new_leaves_cluster, size = 1, prob = detection_proba))
n_free_leaves <- n_free_leaves + n_new_leaves_cluster - 1
}
# store the size of the identical sequence cluster
n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] <- n_nodes_identical_sequence_clusters_sim$frequency[min(n_nodes_detected, max_cluster_size) + 1] + 1
}
return(n_nodes_identical_sequence_clusters_sim |> dplyr::filter(frequency != 0))
}
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,2.5,0.3,14,5.2,0.6,0.4)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
stats::rbinom(n = 1, size = 1, prob = detection_proba)
R
esRd_simulate_cluster_sizes_new_a(1000,2500,10,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes_new_a(1000,2500,5,0.3,14,5.2,0.6,0.4)
esRd_simulate_cluster_sizes(1000,2500,5,0.3,14,5.2,0.6,0.4)
devtools::load_all(".")
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
esRd_simulate_cluster_sizes_new_a()
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 1.0, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 1.0, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 1.0, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5.0, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
mutation_proba
1 - mutation_proba
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
esRd_simulate_cluster_sizes_new_a(n_clusters = 1000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 5000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
frequency
esRd_simulate_cluster_sizes_new_a(n_clusters = 5000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 10000, max_cluster_size = 2500, R = 2.5, k = 0.3, yearly_mutation_rate = 14, mean_generation_interval = 5.2, testing_proba = 1.0, sequencing_proba = 1.0)
esRd_simulate_cluster_sizes_new_a(n_clusters = 10000, max_cluster_size = 2500, R = 1.5, k = 0.1, yearly_mutation_rate = 12, mean_generation_interval = 4.6, testing_proba = 0.4, sequencing_proba = 0.6)
1 - exp(-12/365.25*4.6)
0.6*0.2
0.6*0.4
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
esRd_simulate_cluster_sizes_new_a(n_clusters = 10000, max_cluster_size = 2500, R = 1.5, k = 0.1, yearly_mutation_rate = 12, mean_generation_interval = 4.6, testing_proba = 0.4, sequencing_proba = 0.6)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes_new_a.R", echo=TRUE)
esRd_simulate_cluster_sizes_new_a()
esRd_simulate_cluster_sizes_new_a(n_clusters = 25000)
devtools::load_all(".")
?esRd_simulate_cluster_sizes
?rstan::sampling
devtools::load_all(".")
devtools::load_all(".")
?esRd_estimate_parameters
devtools::load_all(".")
devtools::load_all(".")
?esRd_estimate_parameters
devtools::load_all(".")
esRd_estimate_parameters(clusters_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),clusters_freq = c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1))
options(mc.cores = parallel::detectCores())
esRd_estimate_parameters(clusters_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),clusters_freq = c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1))
clusters_size <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103)
clusters_freq <- c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1)
M <- length(clusters_size)
prior_r <- c(10,10)
prior_k <- c(5,10)
mean_generation_interval <- 5.2
prior_number_yearly_mutations <- 14
prior_testing <- c(1, 3, 0.05, 1)
sequencing_proba <- 1
standata <- list(M = length(clusters_size),
clusters_size = clusters_size,
clusters_freq = clusters_freq,
prior_r = prior_r,
prior_k = prior_k,
mean_generation_interval = mean_generation_interval,
prior_number_yearly_mutations = prior_number_yearly_mutations,
prior_testing = prior_testing,
sequencing_proba = sequencing_proba)
out <- rstan::sampling(object = stanmodels$stan_model_R_k_testing_v1_a,
data = standata,
pars = pars,
chains = chains,
iter = iter,
warmup = warmup,
thin = thin,
seed = seed,
init = init,
check_data = check_data,
sample_file = sample_file,
diagnostic_file = diagnostic_file,
verbose = verbose,
algorithm = algorithm,
control = control,
include = include,
cores = gcores,
open_progress = open_progress,
show_messages = show_messages)
pars = NA
chains = 4
iter = 2000
warmup = floor(iter/2)
thin = 1
seed = sample.int(.Machine$integer.max, 1)
init = 'random'
check_data = TRUE
sample_file = NULL
diagnostic_file = NULL
verbose = FALSE
algorithm = c("NUTS", "HMC", "Fixed_param")
control = NULL
include = TRUE
cores = getOption("mc.cores", 1L),
?rstan::sampling
?getOption
getOption("mc.cores", 1L)
getOption("mc.cores", 1L)
devtools::load_all(".")
options(mc.cores = parallel::detectCores())
esRd_estimate_parameters(clusters_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),clusters_freq = c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1))
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/esRd_simulate_cluster_sizes.R", echo=TRUE)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/estRodis_test/R/stanmodels.R", echo=TRUE)
# names of stan models
stanmodels <- c("esRd_stan_model_estimate_parameters")
# load each stan module
Rcpp::loadModule("stan_fit4stan_model_R_k_testing_v1_a_mod", what = TRUE)
Rcpp::loadModule("stan_fit4stan_model_R_k_testing_v1_a_mod", what = TRUE)
# instantiate each stanmodel object
stanmodels <- sapply(stanmodels, function(model_name) {
# create C++ code for stan model
stan_file <- if(dir.exists("stan")) "stan" else file.path("inst", "stan")
stan_file <- file.path(stan_file, paste0(model_name, ".stan"))
stanfit <- rstan::stanc_builder(stan_file,
allow_undefined = TRUE,
obfuscate_model_name = FALSE)
stanfit$model_cpp <- list(model_cppname = stanfit$model_name,
model_cppcode = stanfit$cppcode)
# create stanmodel object
methods::new(Class = "stanmodel",
model_name = stanfit$model_name,
model_code = stanfit$model_code,
model_cpp = stanfit$model_cpp,
mk_cppmodule = function(x) get(paste0("rstantools_model_", model_name)))
})
stanmodels
pkgbuild::compile_dll()
roxygen2::roxygenize()
rm(list = c("esRd_simulate_cluster_sizes"))
roxygen2::roxygenize()
devtools::install()
install_github("mwohlfender/estRodis_test", force = TRUE)
devtools:: install_github("mwohlfender/estRodis_test", force = TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(estRodis)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(estRodis)
pkgbuild::compile_dll(
pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::install()
library(estRodis)
q()
library(estRodis)
usethis::use_gpl_license(version = 3, include_future = TRUE)
options(mc.cores = parallel::detectCores())
estRodis_estimate_parameters(
clusters_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17,18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),clusters_freq = c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1))
devtools::load_all(".")
options(mc.cores = parallel::detectCores())
estRodis_estimate_parameters(clusters_size = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17,18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),clusters_freq = c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1))
library(estRodis)
