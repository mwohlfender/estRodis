FUN = function(x) match(x = x, table = (variant_subtree_nodes_0 |> dplyr::pull(node_key))))),
to = unlist(lapply(X = to,
FUN = function(x) match(x = x, table = (variant_subtree_nodes_0 |> dplyr::pull(node_key))))))
variant_subtree_nodes_expanded[1:nrow(variant_subtree_nodes_0), ] <- variant_subtree_nodes_0
if (nrow(variant_subtree_edges_0) >= 1) {
variant_subtree_edges_expanded[1:nrow(variant_subtree_edges_0), ] <- variant_subtree_edges_0
}
# determine the nodes of the variant subtree we consider that are leaves
variant_subtree_free_leaves <- intersect(variant_subtree_nodes_0 |> dplyr::pull(node_key), tree_leaves |> dplyr::pull(node_key))
# extend variant subtree ----
# initialize the number of nodes, the number of free leaves and the number of edges of the variant subtree we consider
number_nodes <- nrow(variant_subtree_nodes_0)
number_free_leaves <- length(variant_subtree_free_leaves)
number_edges <- nrow(variant_subtree_edges_0)
# continue as long as there is a free leaf and the limit_size limit of the variant subtree is not reached
while ((number_free_leaves > 0) && (number_nodes <= limit_size)) {
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
if (number_new_free_leaves >= 1) {
# write new leaves into a list
new_leaves <- seq(from = max(variant_subtree_nodes_expanded$node_key) + 1, to = max(variant_subtree_nodes_expanded$node_key) + number_new_free_leaves, by = 1)
}
# add the new leaves to the set of nodes and to the set of free leaves and connect the new leaves to the graph
if (number_new_free_leaves != 0) {
# information about the newly generated nodes
variant_subtree_nodes_expanded_temp <- data.frame(node_key = new_leaves,
mutation_occured = rbinom(n = number_new_free_leaves, size = 1, prob = mutation_proba),
variant_received = rep(x = variant, times = number_new_free_leaves),
variant_after_mutation = new_leaves,
detection = rbinom(n = number_new_free_leaves, size = 1, prob = detection_proba))
# remove nodes at which a mutation occurred
variant_subtree_nodes_expanded_temp <- variant_subtree_nodes_expanded_temp |> dplyr::filter(mutation_occured == 0)
# update number of new free leaves (only those nodes at which no mutation occurred are considered)
number_new_free_leaves <- nrow(variant_subtree_nodes_expanded_temp)
if (number_new_free_leaves != 0) {
# update new_leaves
new_leaves <- variant_subtree_nodes_expanded_temp |> dplyr::pull(node_key)
# add variant_subtree_nodes_expanded_temp to variant_subtree_nodes_expanded
variant_subtree_nodes_expanded[(number_nodes + 1):(number_nodes + number_new_free_leaves), ] <- variant_subtree_nodes_expanded_temp
# add new free leaves to the set of nodes of the variant subtree and to the set of free leaves of the variant subtree
variant_subtree_free_leaves[(number_free_leaves + 1):(number_free_leaves + number_new_free_leaves)] <- new_leaves
# add edges connecting the new free leaves to the first free leaf of the tree
variant_subtree_edges_expanded$from[(number_edges + 1):(number_edges + number_new_free_leaves)] <- rep(x = match(x = variant_subtree_free_leaves[1], table = variant_subtree_nodes_expanded$node_key), times = number_new_free_leaves)
variant_subtree_edges_expanded$to[(number_edges + 1):(number_edges + number_new_free_leaves)] <- (number_edges + 1):(number_edges + number_new_free_leaves) + 1
variant_subtree_edges_expanded$variant_transmitted[(number_edges + 1):(number_edges + number_new_free_leaves)] <- rep(x = variant, times = number_new_free_leaves)
variant_subtree_edges_expanded$from_detected[(number_edges + 1):(number_edges + number_new_free_leaves)] <- unlist(lapply(X = variant_subtree_edges_expanded$from[(number_edges + 1):(number_edges + number_new_free_leaves)],
FUN = function(x) if (variant_subtree_nodes_expanded$detection[x] == 1) {1} else {0}))
variant_subtree_edges_expanded$to_detected[(number_edges + 1):(number_edges + number_new_free_leaves)] <- unlist(lapply(X = variant_subtree_edges_expanded$to[(number_edges + 1):(number_edges + number_new_free_leaves)],
FUN = function(x) if (variant_subtree_nodes_expanded$detection[x] == 1) {1} else {0}))
}
# update the number of nodes, the number of free leaves and the number of edges of the variant subtree
number_nodes <- number_nodes + number_new_free_leaves
number_free_leaves <- number_free_leaves + number_new_free_leaves
number_edges <- number_edges + number_new_free_leaves
}
# delete the free leaf we are considering from the set of free leaves
variant_subtree_free_leaves <- variant_subtree_free_leaves[-1]
# update the number of free leaves of the tree
number_free_leaves <- number_free_leaves - 1
}
# define output
completed_variant_subtree <- list(nodes = variant_subtree_nodes_expanded |> dplyr::filter(node_key != 0),
edges = variant_subtree_edges_expanded |> dplyr::filter(from != 0 & to != 0))
return(completed_variant_subtree)
}
tree_nodes
tree_leaves
tree_edges
variant
limit_size
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
number_new_free_leaves
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
number_new_free_leaves
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
test <- esRd_complete_variant_subtree(tree_nodes, tree_leaves, tree_edges, variant, limit_size, R, k, mutation_proba, detection_proba)
test
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max(max_tree_size, 500), R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
# determine the size of the identical sequence cluster (full detection is applied) corresponding to the variant we are currently looking at
size_variant_subtree_full <- nrow(completed_variant_subtree[[1]])
# store the size of the identical sequence cluster (full detection is applied) corresponding to the variant we are currently looking at
n_nodes_identical_sequence_clusters_sim$frequency_full[min(size_variant_subtree_full, max_tree_size) + 1] <- n_nodes_identical_sequence_clusters_sim$frequency_full[min(size_variant_subtree_full, max_tree_size) + 1] + 1
# determine the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
size_variant_subtree_bernoulli <- nrow(completed_variant_subtree[[1]][completed_variant_subtree[[1]]$detection == 1, ])
size_variant_subtree_bernoulli
completed_variant_subtree[[1]]
completed_variant_subtree[[1]] |> dplyr::filter(detection == 1)
# define output
list_trees_clusters <- list(trees = n_nodes_trees_sim, clusters = n_nodes_identical_sequence_clusters_sim)
list_trees_clusters
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_simulate_cluster_sizes.R", echo=TRUE)
max_tree_size
R
k
mutation_proba
detection_proba
n_clusters
max_tree_size <- 2500
n_clusters <- 1000
test_simulation <- esRd_simulate_cluster_sizes(max_tree_size, R, k, mutation_proba, detection_proba, n_clusters)
test_simulation
test_simulation$clusters |> filter(frequency_full != 0 | frequency_bernoulli != 0)
test_simulation$clusters |> dplyr::filter(frequency_full != 0 | frequency_bernoulli != 0)
sum(test_simulation$clusters |> pull(frequency_bernoulli))
sum(test_simulation$clusters |> dplyr::pull(frequency_bernoulli))
sum(test_simulation$clusters |> dplyr::filter(size >= 1) |> dplyr::pull(frequency_bernoulli))
sum(test_simulation$clusters |> dplyr::filter(size >= 1) |> dplyr::pull(frequency_bernoulli))
n_nodes_trees_sim
test_simulation$trees
test_simulation$trees |> dplyr::filter(frequency_bernoulli != 0)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/apply_model.R", echo=TRUE)
?apply_model
library(estRodis)
?apply_model
?esRd_estimate_parameters
?apply_model
library(estRodis)
remove.packages("estRodis")
library(estRodis)
?esRd_estimate_parameters
#' @examples
devtools::load_all(".")
?esRd_estimate_parameters
esRd_estimate_parameters(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 28, 29, 32, 33, 34, 35, 36, 83, 103),
c(703, 117, 49, 37, 19, 17, 5, 15, 4, 3, 1, 3, 4, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1), c(10,10), c(5,10), 5.2, c(14,0.5), c(1,3,0.05,1), 1)
devtools::load_all(".")
?esRd_estimate_parameters
devtools::load_all(".")
?esRd_estimate_parameters
devtools::load_all(".")
?esRd_simulate_cluster_sizes
devtools::load_all(".")
?esRd_simulate_cluster_sizes
?esRd_case_detection_indep_bernoulli
devtools::load_all(".")
?esRd_simulate_cluster_sizes
n_clusters <- 1000
max_cluster_size <- 2500
R <- 1.0
k <- 0.3
yearly_mutation_rate <- 14
mean_generation_interval <- 5.2
testing_proba <- 0.6
sequencing_proba <- 0.4
devtools::load_all(".")
?esRd_simulate_cluster_sizes
devtools::load_all(".")
?esRd_simulate_cluster_sizes
devtools::load_all(".")
devtools::load_all(".")
?esRd_simulate_cluster_sizes
devtools::load_all(".")
esRd_simulate_cluster_sizes()
devtools::load_all(".")
library(estRodis)
?esRd_simulate_cluster_sizes
1 - exp(- 0 / 365.25 * 5.2)
n_clusters <- 1000
max_cluster_size <- 2500
devtools::load_all(".")
n_clusters
max_cluster_size
R
R <- 1
k <- 0.3
yearly_mutation_rate <- 14
mean_generation_interval <- 5.2
testing_proba <- 0.6
sequencing_proba <- 0.4
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency_bernoulli = rep(x = 0, times = max_cluster_size + 1))
n_nodes_identical_sequence_clusters_sim
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
R <- 2.5
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
nodes <- tree[[1]]
leaves <- tree[[2]]
edges <- tree[[3]]
# 2 - simulate mutations ----
# whether a mutation occurs at a node or not is determined by a Bernoulli distribution with parameter mutation_proba
mutation_proba <- 1 - exp(- yearly_mutation_rate / 365.25 * mean_generation_interval)
tree_mutation_information <- esRd_apply_mutations(nodes = nodes, edges = edges, mutation_proba = mutation_proba)
nodes_a <- tree_mutation_information[[1]]
edges_a <- tree_mutation_information[[2]]
# 3 - simulate detection ----
# whether a node is detected or not is determined by a Bernoulli distribution with parameter detection_proba
detection_proba <- testing_proba * sequencing_proba
tree_detection_indep_bernoulli <- esRd_case_detection_indep_bernoulli(nodes = nodes_a, edges = edges_a, detection_proba = detection_proba)
nodes_b_bernoulli <- tree_detection_indep_bernoulli[[1]]
edges_b_bernoulli <- tree_detection_indep_bernoulli[[2]]
detection_proba
nodes_b_bernoulli
nodes_b_bernoulli
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
nodes <- tree[[1]]
leaves <- tree[[2]]
edges <- tree[[3]]
# 2 - simulate mutations ----
# whether a mutation occurs at a node or not is determined by a Bernoulli distribution with parameter mutation_proba
mutation_proba <- 1 - exp(- yearly_mutation_rate / 365.25 * mean_generation_interval)
tree_mutation_information <- esRd_apply_mutations(nodes = nodes, edges = edges, mutation_proba = mutation_proba)
nodes_a <- tree_mutation_information[[1]]
edges_a <- tree_mutation_information[[2]]
# 3 - simulate detection ----
# whether a node is detected or not is determined by a Bernoulli distribution with parameter detection_proba
detection_proba <- testing_proba * sequencing_proba
tree_detection_indep_bernoulli <- esRd_case_detection_indep_bernoulli(nodes = nodes_a, edges = edges_a, detection_proba = detection_proba)
nodes_b_bernoulli <- tree_detection_indep_bernoulli[[1]]
edges_b_bernoulli <- tree_detection_indep_bernoulli[[2]]
if (nodes_a$mutation_occured[1] == 1) {
variants <- nodes_a |> dplyr::filter(mutation_occured == 1) |> dplyr::pull(node_key)
} else {
variants <- c(0, nodes_a |> dplyr::filter(mutation_occured == 1) |> dplyr::pull(node_key))
}
variants
variants
jj <- 0
sum(n_nodes_identical_sequence_clusters_sim$frequency_bernoulli[-1])
# determine nodes belonging to the identical sequence cluster
variant_subtree_nodes <- nodes_a |> dplyr::filter((mutation_occured == 0 & variant_received == jj) | (mutation_occured == 1 & variant_after_mutation == jj))
variant_subtree_nodes
length(intersect(variant_subtree_nodes$node_key, leaves$node_key))
# determine the size of the identical sequence cluster (full detection is applied) corresponding to the variant we are currently looking at
size_variant_subtree <- nrow(variant_subtree_nodes)
size_variant_subtree
# determine the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
n_nodes_detected_bernoulli <- nrow(nodes_b_bernoulli |> dplyr::filter((mutation_occured == 0 & variant_received == jj) | (mutation_occured == 1 & variant_after_mutation == jj)) |> dplyr::filter(detection == 1))
n_nodes_detected_bernoulli
nodes_b_bernoulli
# store the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
n_nodes_identical_sequence_clusters_sim$frequency_bernoulli[min(n_nodes_detected_bernoulli, max_cluster_size) + 1] <-  n_nodes_identical_sequence_clusters_sim$frequency_bernoulli[min(n_nodes_detected_bernoulli, max_cluster_size) + 1] + 1
n_nodes_identical_sequence_clusters_sim
n_clusters
max_cluster_size
R
k
yearly_mutation_rate
mean_generation_interval
testing_proba
sequencing_proba
# distribution of the size of identical sequence clusters
n_nodes_identical_sequence_clusters_sim <- data.frame(size = c(0:max_cluster_size),
frequency_bernoulli = rep(x = 0, times = max_cluster_size + 1))
n_nodes_identical_sequence_clusters_sim
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
# 1 - simulate transmission tree ----
# offspring distribution: negative binomial distribution with parameters size = k (overdispersion parameter) and mu = R (mean)
tree <- esRd_create_tree_structure(R = R, k = k, max_tree_size = max_cluster_size)
tree
nodes <- tree[[1]]
leaves <- tree[[2]]
edges <- tree[[3]]
# 2 - simulate mutations ----
# whether a mutation occurs at a node or not is determined by a Bernoulli distribution with parameter mutation_proba
mutation_proba <- 1 - exp(- yearly_mutation_rate / 365.25 * mean_generation_interval)
tree_mutation_information <- esRd_apply_mutations(nodes = nodes, edges = edges, mutation_proba = mutation_proba)
nodes_a <- tree_mutation_information[[1]]
edges_a <- tree_mutation_information[[2]]
# 3 - simulate detection ----
# whether a node is detected or not is determined by a Bernoulli distribution with parameter detection_proba
detection_proba <- testing_proba * sequencing_proba
tree_detection_indep_bernoulli <- esRd_case_detection_indep_bernoulli(nodes = nodes_a, edges = edges_a, detection_proba = detection_proba)
nodes_b_bernoulli <- tree_detection_indep_bernoulli[[1]]
edges_b_bernoulli <- tree_detection_indep_bernoulli[[2]]
if (nodes_a$mutation_occured[1] == 1) {
variants <- nodes_a |> dplyr::filter(mutation_occured == 1) |> dplyr::pull(node_key)
} else {
variants <- c(0, nodes_a |> dplyr::filter(mutation_occured == 1) |> dplyr::pull(node_key))
}
variants
jj <- 0
# determine nodes belonging to the identical sequence cluster
variant_subtree_nodes <- nodes_a |> dplyr::filter((mutation_occured == 0 & variant_received == jj) | (mutation_occured == 1 & variant_after_mutation == jj))
length(intersect(variant_subtree_nodes$node_key, leaves$node_key))
jj <- 2496
length(intersect(variant_subtree_nodes$node_key, leaves$node_key))
variant_subtree_nodes
# determine nodes belonging to the identical sequence cluster
variant_subtree_nodes <- nodes_a |> dplyr::filter((mutation_occured == 0 & variant_received == jj) | (mutation_occured == 1 & variant_after_mutation == jj))
variant_subtree_nodes
length(intersect(variant_subtree_nodes$node_key, leaves$node_key))
# determine the size of the identical sequence cluster (full detection is applied) corresponding to the variant we are currently looking at
size_variant_subtree <- nrow(variant_subtree_nodes)
size_variant_subtree
# determine the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
n_nodes_detected_bernoulli <- nrow(nodes_b_bernoulli |> dplyr::filter((mutation_occured == 0 & variant_received == jj) | (mutation_occured == 1 & variant_after_mutation == jj)) |> dplyr::filter(detection == 1))
n_nodes_detected_bernoulli
length(intersect(variant_subtree_nodes$node_key, leaves$node_key))
nrow(variant_subtree_nodes)
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max_cluster_size, R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
completed_variant_subtree
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max_cluster_size, R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
completed_variant_subtree
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max_cluster_size, R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
completed_variant_subtree
tree_nodes <- nodes_b_bernoulli
tree_leaves <- leaves
tree_edges <- tree_edges
tree_edges <- edges
tree_edges <- edges_b_bernoulli
jj
variant <- jj
limit_size <- max_cluster_size
# create data frame to store information about the nodes of the variant subtree we consider
# we define it to be large enough (CHECK: limit_size + 250, is there a better solution?)
variant_subtree_nodes_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_nodes), nrow = limit_size + 250))
names(variant_subtree_nodes_expanded) <- names(tree_nodes)
# create data frame to store information about the edges of the variant subtree we consider
# we define it to be large enough (CHECK: limit_size + 250, is there a better solution?)
variant_subtree_edges_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_edges), nrow = limit_size + 250))
names(variant_subtree_edges_expanded) <- names(tree_edges)
ceiling(limit_size / detection_proba)
# create data frame to store information about the nodes of the variant subtree we consider
# we define it to be large enough (CHECK: limit_size + 250, is there a better solution?)
variant_subtree_nodes_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_nodes), nrow = max(2 * ceiling(limit_size / detection_proba), ceiling(limit_size / detection_proba) + 250)))
names(variant_subtree_nodes_expanded) <- names(tree_nodes)
# create data frame to store information about the edges of the variant subtree we consider
# we define it to be large enough (CHECK: limit_size + 250, is there a better solution?)
variant_subtree_edges_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_edges), nrow = max(2 * ceiling(limit_size / detection_proba), ceiling(limit_size / detection_proba) + 250)))
names(variant_subtree_edges_expanded) <- names(tree_edges)
names(tree_nodes)
names(tree_edges)
# create data frame to store information about the nodes of the variant subtree we consider
# we define it to be most likely large enough (if necessary it will be enlarged)
variant_subtree-_nodes_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_nodes), nrow = max(2 * ceiling(limit_size / detection_proba), ceiling(limit_size / detection_proba) + 250)))
# create data frame to store information about the nodes of the variant subtree we consider
# we define it to be most likely large enough (if necessary it will be enlarged)
variant_subtree_nodes_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_nodes), nrow = max(2 * ceiling(limit_size / detection_proba), ceiling(limit_size / detection_proba) + 250)))
names(variant_subtree_nodes_expanded) <- names(tree_nodes)
# create data frame to store information about the edges of the variant subtree we consider
# we define it to be most likely large enough (if necessary it will be enlarged)
variant_subtree_edges_expanded <- data.frame(matrix(data = 0, ncol = ncol(tree_edges), nrow = max(2 * ceiling(limit_size / detection_proba), ceiling(limit_size / detection_proba) + 250)))
names(variant_subtree_edges_expanded) <- names(tree_edges)
variant_subtree_edges_expanded
# store information about the variant subtree we consider (the part of the variant subtree we consider that has already been created)
variant_subtree_nodes_0 <- tree_nodes |> dplyr::filter((mutation_occured == 1 & variant_after_mutation == variant) | (mutation_occured == 0 & variant_received == variant))
variant_subtree_edges_0 <- tree_edges |> dplyr::filter((from %in% (variant_subtree_nodes_0 |> dplyr::pull(node_key))) & (to %in% (variant_subtree_nodes_0 |> dplyr::pull(node_key))))
variant_subtree_edges_0 <- variant_subtree_edges_0 |> dplyr::mutate(from = unlist(lapply(X = from,
FUN = function(x) match(x = x, table = (variant_subtree_nodes_0 |> dplyr::pull(node_key))))),
to = unlist(lapply(X = to,
FUN = function(x) match(x = x, table = (variant_subtree_nodes_0 |> dplyr::pull(node_key))))))
variant_subtree_nodes_expanded[1:nrow(variant_subtree_nodes_0), ] <- variant_subtree_nodes_0
variant_subtree_edges_0
variant_subtree_edges_0
variant_subtree_nodes_0
variant_subtree_nodes_expanded[1:nrow(variant_subtree_nodes_0), ] <- variant_subtree_nodes_0
variant_subtree_nodes_expanded
if (nrow(variant_subtree_edges_0) >= 1) {
variant_subtree_edges_expanded[1:nrow(variant_subtree_edges_0), ] <- variant_subtree_edges_0
}
head(variant_subtree_edges_expanded)
head(variant_subtree_nodes_expanded)
# determine the nodes of the variant subtree we consider that are leaves
variant_subtree_free_leaves <- intersect(variant_subtree_nodes_0 |> dplyr::pull(node_key), tree_leaves |> dplyr::pull(node_key))
variant_subtree_free_leaves
# initialize the number of nodes, the number of free leaves and the number of edges of the variant subtree we consider
number_nodes <- nrow(variant_subtree_nodes_0)
number_free_leaves <- length(variant_subtree_free_leaves)
number_edges <- nrow(variant_subtree_edges_0)
number_nodes
number_free_leaves
number_edges
View(variant_subtree_nodes_0)
sum(variant_subtree_nodes_expanded$detection)
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
number_new_free_leaves
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
number_new_free_leaves
# create new leaves (might be no new leaves)
number_new_free_leaves <- stats::rnbinom(n = 1, size = k, mu = R)
number_new_free_leaves
number_new_free_leaves >= 1
# write new leaves into a list
new_leaves <- seq(from = max(variant_subtree_nodes_expanded$node_key) + 1, to = max(variant_subtree_nodes_expanded$node_key) + number_new_free_leaves, by = 1)
new_leaves
# information about the newly generated nodes
variant_subtree_nodes_expanded_temp <- data.frame(node_key = new_leaves,
mutation_occured = rbinom(n = number_new_free_leaves, size = 1, prob = mutation_proba),
variant_received = rep(x = variant, times = number_new_free_leaves),
variant_after_mutation = new_leaves,
detection = rbinom(n = number_new_free_leaves, size = 1, prob = detection_proba))
variant_subtree_nodes_expanded_temp
# remove nodes at which a mutation occurred
variant_subtree_nodes_expanded_temp <- variant_subtree_nodes_expanded_temp |> dplyr::filter(mutation_occured == 0)
variant_subtree_nodes_expanded_temp
# update number of new free leaves (only those nodes at which no mutation occurred are considered)
number_new_free_leaves <- nrow(variant_subtree_nodes_expanded_temp)
number_new_free_leaves
number_new_free_leaves >= 1
# update new_leaves
new_leaves <- variant_subtree_nodes_expanded_temp |> dplyr::pull(node_key)
new_leaves
# add variant_subtree_nodes_expanded_temp to variant_subtree_nodes_expanded
variant_subtree_nodes_expanded[(number_nodes + 1):(number_nodes + number_new_free_leaves), ] <- variant_subtree_nodes_expanded_temp
variant_subtree_nodes_expanded
head(variant_subtree_nodes_expanded)
test <- data.frame(x = 1:10, y = 1:10)
test[11,] <- c(2,2)
tets
test
variant_subtree_nodes_expanded_temp
test[12:14,] <- data.frame(x = 2:4, y = 2:4)
test
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max_cluster_size, R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
completed_variant_subtree
completed_variant_subtree <- esRd_complete_variant_subtree(tree_nodes = nodes_b_bernoulli, tree_leaves = leaves, tree_edges = edges_b_bernoulli, variant = jj, limit_size = max_cluster_size, R = R, k = k, mutation_proba = mutation_proba, detection_proba = detection_proba)
completed_variant_subtree
# determine the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
size_variant_subtree_bernoulli <- nrow(completed_variant_subtree[[1]] |> dplyr::filter(detection == 1))
size_variant_subtree_bernoulli
# store the size of the identical sequence cluster (random detection with probability detection_proba is applied) corresponding to the variant we are currently looking at
n_nodes_identical_sequence_clusters_sim$frequency_bernoulli[min(size_variant_subtree_bernoulli, max_cluster_size) + 1] <- n_nodes_identical_sequence_clusters_sim$frequency_bernoulli[min(size_variant_subtree_bernoulli, max_cluster_size) + 1] + 1
tail(n_nodes_identical_sequence_clusters_sim)
devtools::load_all(".")
esRd_simulate_cluster_sizes(n_clusters = 1000,max_cluster_size = 5000,R = 2.5,k = 0.3,yearly_mutation_rate = 14,mean_generation_interval = 5.2,testing_proba = 0.6,sequencing_proba = 0.4)
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_complete_variant_subtree.R", echo=TRUE)
devtools::load_all(".")
esRd_simulate_cluster_sizes(n_clusters = 1000,max_cluster_size = 1000,R = 2.5,k = 0.3,yearly_mutation_rate = 14,mean_generation_interval = 5.2,testing_proba = 0.6,sequencing_proba = 0.4)
n_nodes_identical_sequence_clusters_sim
source("C:/Users/mw22f082/Documents_MW/projects/genomic_trees/genomic_trees_v3/R_package_estRodis/estRodis/R/esRd_simulate_cluster_sizes.R", echo=TRUE)
devtools::load_all(".")
rm(list = c("esRd_simulate_cluster_sizes"))
devtools::load_all(".")
test <- esRd_simulate_cluster_sizes <- function(n_clusters = 1000,
max_cluster_size = 2500,
R = 0.7,
k = 0.3,
yearly_mutation_rate = 14,
mean_generation_interval = 5.2,
testing_proba = 0.6,
sequencing_proba = 0.4)
test <- esRd_simulate_cluster_sizes(n_clusters = 1000, max_cluster_size = 2500,R = 0.7,k = 0.3,yearly_mutation_rate = 14,mean_generation_interval = 5.2, testing_proba = 0.6,sequencing_proba = 0.4)
test
sum(test$frequency_bernoulli)
devtools::load_all(".")
devtools::load_all(".")
test <- esRd_simulate_cluster_sizes(n_clusters = 1000, max_cluster_size = 2500,R = 1.5,k = 0.3,yearly_mutation_rate = 14,mean_generation_interval = 5.2, testing_proba = 0.6,sequencing_proba = 0.4)
test
mutation_proba
sum(test$frequency)
183 / 2272
R
k
